{"0": {"topic_name": "Array and Array Operations", "mcqs": {"1": {"statement": " Which of these best describes an array?", "options": {"a": "A data structure that shows a hierarchical behavior", "b": "Container of objects of similar types", "c": "Arrays are immutable once initialised", "d": "Array is not a data structure"}, "correct": "b"}, "2": {"statement": " How do you initialize an array in C?", "options": {"a": "int arr[3] = (1,2,3);", "b": "int arr(3) = {1,2,3};", "c": "int arr[3] = {1,2,3};", "d": "int arr(3) = (1,2,3);"}, "correct": "c"}, "3": {"statement": " How do you instantiate an array in Java?", "options": {"a": "int arr[] = new int(3);", "b": "int arr[];", "c": "int arr[] = new int[3];", "d": "int arr() = new int(3);"}, "correct": "c"}, "4": {"statement": " Which of the following is the correct way to declare a multidimensional array in Java?", "options": {"a": "int[] arr;", "b": "int arr[[]];", "c": "int[][]arr;", "d": "int[[]] arr;"}, "correct": "a"}, "9": {"statement": " When does the ArrayIndexOutOfBoundsException occur?", "options": {"a": "Compile-time", "b": "Run-time", "c": "Not an error", "d": "Not an exception at all"}, "correct": "b"}, "10": {"statement": " Which of the following concepts make extensive use of arrays?", "options": {"a": "Binary trees", "b": "Scheduling of processes", "c": "Caching", "d": "Spatial locality"}, "correct": "d"}, "11": {"statement": " What are the advantages of arrays?", "options": {"a": "Objects of mixed data types can be stored", "b": "Elements in an array cannot be sorted", "c": "Index of first element of an array is 1", "d": "Easier to store elements of same data type"}, "correct": "a"}, "12": {"statement": " What are the disadvantages of arrays?", "options": {"a": "Data structure like queue or stack cannot be implemented", "b": "There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size", "c": "Index value of an array can be negative", "d": "Elements are sequentially accessed"}, "correct": "a"}}}, "1": {"topic_name": "Stack Operations \u2013 1", "mcqs": {"1": {"statement": " Process of inserting an element in stack is called ____________", "options": {"a": "Create", "b": "Push", "c": "Evaluation", "d": "Pop"}, "correct": "d"}, "2": {"statement": " Process of removing an element from stack is called __________", "options": {"a": "Create", "b": "Push", "c": "Evaluation", "d": "Pop"}, "correct": "a"}, "3": {"statement": " In a stack, if a user tries to remove an element from an empty stack it is called _________", "options": {"a": "Underflow", "b": "Empty collection", "c": "Overflow", "d": "Garbage Collection"}, "correct": "a"}, "4": {"statement": " Pushing an element into stack already having five elements and stack size of 5, then stack becomes ___________", "options": {"a": "Overflow", "b": "Crash", "c": "Underflow", "d": "User flow"}, "correct": "d"}, "5": {"statement": " Entries in a stack are \u201cordered\u201d. What is the meaning of this statement?", "options": {"a": "A collection of stacks is sortable", "b": "Stack entries may be compared with the \u2018<\u2018 operation", "c": "The entries are stored in a linked list", "d": "There is a Sequential entry that is one by one"}, "correct": "d"}, "6": {"statement": " Which of the following is not the application of stack?", "options": {"a": "A parentheses balancing program", "b": "Tracking of local variables at run time", "c": "Compiler Syntax Analyzer", "d": "Data Transfer between two asynchronous process"}, "correct": "c"}, "7": {"statement": " Consider the usual algorithm for determining whether a sequence of parentheses is balanced. The maximum number of parentheses that appear on the stack AT ANY ONE TIME when the algorithm analyzes: (()(())(()))?", "options": {"a": "1", "b": "2", "c": "3", "d": "4 or more"}, "correct": "b"}, "8": {"statement": " Consider the usual algorithm for determining whether a sequence of parentheses is balanced. Suppose that you run the algorithm on a sequence that contains 2 left parentheses and 3 right parentheses (in some order). The maximum number of parentheses that appear on the stack AT ANY ONE TIME during the computation?", "options": {"a": "1", "b": "2", "c": "3", "d": "4 or more"}, "correct": "d"}, "9": {"statement": " What is the value of the postfix expression 6 3 2 4 + \u2013 *?", "options": {"a": "1", "b": "40", "c": "74", "d": "-18"}, "correct": "d"}}}, "2": {"topic_name": "Stack Operations \u2013 2", "mcqs": {"1": {"statement": " The postfix form of the expression (A+ B)*(C*D- E)*F / G is?", "options": {"a": "AB+ CD*E \u2013 FG /**", "b": "AB + CD* E \u2013 F **G /", "c": "AB + CD* E \u2013 *F *G /", "d": "AB + CDE * \u2013 * F *G /"}, "correct": "a"}, "2": {"statement": " The data structure required to check whether an expression contains a balanced parenthesis is?", "options": {"a": "Stack", "b": "Queue", "c": "Array", "d": "Tree"}, "correct": "b"}, "3": {"statement": " What data structure would you mostly likely see in non recursive implementation of a recursive algorithm?", "options": {"a": "Linked List", "b": "Stack", "c": "Queue", "d": "Tree"}, "correct": "d"}, "4": {"statement": " The process of accessing data stored in a serial access memory is similar to manipulating data on a ________", "options": {"a": "Heap", "b": "Binary Tree", "c": "Array", "d": "Stack"}, "correct": "b"}, "5": {"statement": " The postfix form of A*B+C/D is?", "options": {"a": "*AB/CD+", "b": "AB*CD/+", "c": "A*BC+/D", "d": "ABCD+/*"}, "correct": "d"}, "6": {"statement": " Which data structure is needed to convert infix notation to postfix notation?", "options": {"a": "Branch", "b": "Tree", "c": "Queue", "d": "Stack"}, "correct": "c"}, "7": {"statement": " The prefix form of A-B/ (C * D ^ E) is?", "options": {"a": "-/*^ACBDE", "b": "-ABCD*^DE", "c": "-A/B*C^DE", "d": "-A/BC*^DE"}, "correct": "a"}, "8": {"statement": " What is the result of the following operation?\nTop (Push (S, X))", "options": {"a": "X", "b": "X+S", "c": "S", "d": "XS"}, "correct": "c"}, "9": {"statement": " The prefix form of an infix expression (p + q) \u2013 (r * t) is?", "options": {"a": "+ pq \u2013 *rt", "b": "\u2013 +pqr * t", "c": "\u2013 +pq * rt", "d": "\u2013 + * pqrt"}, "correct": "b"}}}, "3": {"topic_name": "Stack Operations \u2013 3", "mcqs": {"1": {"statement": " The result of evaluating the postfix expression 5, 4, 6, +, *, 4, 9, 3, /, +, * is?", "options": {"a": "600", "b": "350", "c": "650", "d": "588"}, "correct": "a"}, "2": {"statement": " Convert the following infix expressions into its equivalent postfix expressions.\n(A + B \u22c0D)/(E \u2013 F)+G", "options": {"a": "(A B D \u22c0 + E F \u2013 / G +)", "b": "(A B D +\u22c0 E F \u2013 / G +)", "c": "(A B D \u22c0 + E F/- G +)", "d": "(A B D  E F + \u22c0 / \u2013 G +)"}, "correct": "a"}, "3": {"statement": " Convert the following Infix expression to Postfix form using a stack.\nx + y * z + (p * q + r) * s, Follow usual precedence rule and assume that the expression is legal.", "options": {"a": "xyz*+pq*r+s*+", "b": "xyz*+pq*r+s+*", "c": "xyz+*pq*r+s*+", "d": "xyzp+**qr+s*+"}, "correct": "c"}, "4": {"statement": " Which of the following statement(s) about stack data structure is/are NOT correct?", "options": {"a": "Linked List are used for implementing Stacks", "b": "Top of the Stack always contain the new node", "c": "Stack is the FIFO data structure", "d": "Null link is present in the last node at the bottom of the stack"}, "correct": "a"}, "7": {"statement": " Which of the following is not an inherent application of stack?", "options": {"a": "Reversing a string", "b": "Evaluation of postfix expression", "c": "Implementation of recursion", "d": "Job scheduling"}, "correct": "b"}, "8": {"statement": " The type of expression in which operator succeeds its operands is?", "options": {"a": "Infix Expression", "b": "Prefix Expression", "c": "Postfix Expression", "d": "Both Prefix and Postfix Expressions"}, "correct": "b"}}}, "4": {"topic_name": "Queue Operations", "mcqs": {"1": {"statement": " A linear list of elements in which deletion can be done from one end (front) and insertion can take place only at the other end (rear) is known as _____________", "options": {"a": "Queue", "b": "Stack", "c": "Tree", "d": "Linked list"}, "correct": "c"}, "2": {"statement": " The data structure required for Breadth First Traversal on a graph is?", "options": {"a": "Stack", "b": "Array", "c": "Queue", "d": "Tree"}, "correct": "a"}, "3": {"statement": " A queue follows __________", "options": {"a": "FIFO (First In First Out) principle", "b": "LIFO (Last In First Out) principle", "c": "Ordered array", "d": "Linear tree"}, "correct": "a"}, "4": {"statement": " Circular Queue is also known as ________", "options": {"a": "Ring Buffer", "b": "Square Buffer", "c": "Rectangle Buffer", "d": "Curve Buffer"}, "correct": "a"}, "5": {"statement": " If the elements \u201cA\u201d, \u201cB\u201d, \u201cC\u201d and \u201cD\u201d are placed in a queue and are deleted one at a time, in what order will they be removed?", "options": {"a": "ABCD", "b": "DCBA", "c": "DCAB", "d": "ABDC"}, "correct": "c"}, "6": {"statement": " A data structure in which elements can be inserted or deleted at/from both ends but not in the middle is?", "options": {"a": "Queue", "b": "Circular queue", "c": "Dequeue", "d": "Priority queue"}, "correct": "a"}, "7": {"statement": " A normal queue, if implemented using an array of size MAX_SIZE, gets full when?", "options": {"a": "Rear = MAX_SIZE \u2013 1", "b": "Front = (rear + 1)mod MAX_SIZE", "c": "Front = rear + 1", "d": "Rear = front"}, "correct": "c"}, "8": {"statement": " Queues serve major role in ______________", "options": {"a": "Simulation of recursion", "b": "Simulation of arbitrary linked list", "c": "Simulation of limited resource allocation", "d": "Simulation of heap sort"}, "correct": "b"}}}, "5": {"topic_name": "Singly Linked Lists Operations \u2013 1", "mcqs": {"1": {"statement": " A linear collection of data elements where the linear node is given by means of pointer is called?", "options": {"a": "Linked list", "b": "Node list", "c": "Primitive list", "d": "Unordered list"}, "correct": "b"}, "4": {"statement": " In linked list each node contains a minimum of two fields. One field is data field to store the data second field is?", "options": {"a": "Pointer to character", "b": "Pointer to integer", "c": "Pointer to node", "d": "Node"}, "correct": "a"}, "5": {"statement": " What would be the asymptotic time complexity to add a node at the end of singly linked list, if the pointer is initially pointing to the head of the list?", "options": {"a": "O(1)", "b": "O(n)", "c": "\u03b8(n)", "d": "\u03b8(1)"}, "correct": "b"}, "6": {"statement": " What would be the asymptotic time complexity to insert an element at the front of the linked list (head is known)?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(n2)", "d": "O(n3)"}, "correct": "a"}, "7": {"statement": " What would be the asymptotic time complexity to find an element in the linked list?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(n2)", "d": "O(n4)"}, "correct": "c"}, "8": {"statement": " What would be the asymptotic time complexity to insert an element at the second position in the linked list?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(n2)", "d": "O(n3)"}, "correct": "a"}}}, "6": {"topic_name": "Singly Linked Lists Operations \u2013 2", "mcqs": {"1": {"statement": " What kind of linked list is best to answer questions like \u201cWhat is the item at position n?\u201d", "options": {"a": "Singly linked list", "b": "Doubly linked list", "c": "Circular linked list", "d": "Array implementation of linked list"}, "correct": "d"}, "2": {"statement": " Linked lists are not suitable for the implementation of ___________", "options": {"a": "Insertion sort", "b": "Radix sort", "c": "Polynomial manipulation", "d": "Binary search"}, "correct": "a"}, "3": {"statement": " Linked list is considered as an example of ___________ type of memory allocation.", "options": {"a": "Dynamic", "b": "Static", "c": "Compile time", "d": "Heap"}, "correct": "b"}, "4": {"statement": " In Linked List implementation, a node carries information regarding ___________", "options": {"a": "Data", "b": "Link", "c": "Data and Link", "d": "Node"}, "correct": "c"}, "5": {"statement": " Linked list data structure offers considerable saving in _____________", "options": {"a": "Computational Time", "b": "Space Utilization", "c": "Space Utilization and Computational Time", "d": "Speed Utilization"}, "correct": "d"}, "6": {"statement": " Which of the following points is/are not true about Linked List data structure when it is compared with an array?", "options": {"a": "Arrays have better cache locality that can make them better in terms of performance", "b": "It is easy to insert and delete elements in Linked List", "c": "Random access is not allowed in a typical implementation of Linked Lists", "d": "Access of elements in linked list takes less time than compared to arrays"}, "correct": "b"}}}, "7": {"topic_name": "Singly Linked Lists Operations \u2013 3", "mcqs": {}}, "8": {"topic_name": "Singly Linked Lists", "mcqs": {"1": {"statement": " Which of the following is not a disadvantage to the usage of array?", "options": {"a": "Fixed size", "b": "There are chances of wastage of memory space if elements inserted in an array are lesser than the allocated size", "c": "Insertion based on position", "d": "Accessing elements at specified positions"}, "correct": "d"}, "2": {"statement": " What is the time complexity of inserting at the end in dynamic arrays?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(logn)", "d": "Either O(1) or O(n)"}, "correct": "b"}, "3": {"statement": " What is the time complexity to count the number of elements in the linked list?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(logn)", "d": "O(n2)"}, "correct": "a"}}}, "9": {"topic_name": "Doubly Linked Lists", "mcqs": {"1": {"statement": " Which of the following is false about a doubly linked list?", "options": {"a": "We can navigate in both the directions", "b": "It requires more space than a singly linked list", "c": "The insertion and deletion of a node take a bit longer", "d": "Implementing a doubly linked list is easier than singly linked list"}, "correct": "a"}, "7": {"statement": " What is a memory efficient double linked list?", "options": {"a": "Each node has only one pointer to traverse the list back and forth", "b": "The list has breakpoints for faster traversal", "c": "An auxiliary singly linked list acts as a helper list to traverse through the doubly linked list", "d": "A doubly linked list that uses bitwise AND operator for storing addresses"}, "correct": "c"}}}, "10": {"topic_name": "Circular Linked Lists", "mcqs": {"1": {"statement": " What differentiates a circular linked list from a normal linked list?", "options": {"a": "You cannot have the \u2018next\u2019 pointer point to null in a circular linked list", "b": "It is faster to traverse the circular linked list", "c": "You may or may not have the \u2018next\u2019 pointer point to null in a circular linked list", "d": "Head node is known in circular linked list"}, "correct": "a"}, "8": {"statement": " What is the time complexity of searching for an element in a circular linked list?", "options": {"a": "O(n)", "b": "O(nlogn)", "c": "O(1)", "d": "O(n2)"}, "correct": "b"}, "9": {"statement": " Which of the following application makes use of a circular linked list?", "options": {"a": "Undo operation in a text editor", "b": "Recursive function calls", "c": "Allocating CPU to resources", "d": "Implement Hash Tables"}, "correct": "b"}}}, "11": {"topic_name": "Stack using Array", "mcqs": {"1": {"statement": " Which of the following real world scenarios would you associate with a stack data structure?", "options": {"a": "piling up of chairs one above the other", "b": "people standing in a line to be serviced at a counter", "c": "offer services based on the priority of the customer", "d": "tatkal Ticket Booking in IRCTC"}, "correct": "c"}, "4": {"statement": " What does \u2018stack underflow\u2019 refer to?", "options": {"a": "accessing item from an undefined stack", "b": "adding items to a full stack", "c": "removing items from an empty stack", "d": "index out of bounds exception"}, "correct": "a"}, "7": {"statement": " What is the time complexity of pop() operation when the stack is implemented using an array?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(logn)", "d": "O(nlogn)"}, "correct": "d"}, "8": {"statement": " Which of the following array position will be occupied by a new element being pushed for a stack of size N elements(capacity of stack > N)?", "options": {"a": "S[N-1] ", "b": "S[N] ", "c": "S[1] ", "d": "S[0] "}, "correct": "a"}, "9": {"statement": " What happens when you pop from an empty stack while implementing using the Stack ADT in Java?", "options": {"a": "Undefined error", "b": "Compiler displays a warning", "c": "EmptyStackException is thrown", "d": "NoStackException is thrown"}, "correct": "a"}}}, "12": {"topic_name": "Stack using Linked List", "mcqs": {"1": {"statement": " What is the best case time complexity of deleting a node in a Singly Linked list?", "options": {"a": "O (n)", "b": "O (n2)", "c": "O (nlogn)", "d": "O (1)"}, "correct": "d"}, "2": {"statement": " Which of the following statements are not correct with respect to Singly Linked List(SLL) and Doubly Linked List(DLL)?", "options": {"a": "Complexity of Insertion and Deletion at known position is O(n) in SLL and O(1) in DLL", "b": "SLL uses lesser memory per node than DLL", "c": "DLL has more searching power than SLL", "d": "Number of node fields in SLL is more than DLL"}, "correct": "a"}}}, "13": {"topic_name": "Queue using Array", "mcqs": {"1": {"statement": " Which of the following properties is associated with a queue?", "options": {"a": "First In Last Out", "b": "First In First Out", "c": "Last In First Out", "d": "Last In Last Out"}, "correct": "b"}, "2": {"statement": " In a circular queue, how do you increment the rear end of the queue?", "options": {"a": "rear++", "b": "(rear+1) % CAPACITY", "c": "(rear % CAPACITY)+1", "d": "rear\u2013"}, "correct": "a"}, "3": {"statement": " What is the term for inserting into a full queue known as?", "options": {"a": "overflow", "b": "underflow", "c": "null pointer exception", "d": "program won\u2019t be compiled"}, "correct": "d"}, "4": {"statement": " What is the time complexity of enqueue operation?", "options": {"a": "O(logn)", "b": "O(nlogn)", "c": "O(n)", "d": "O(1)"}, "correct": "c"}, "7": {"statement": " What is the need for a circular queue?", "options": {"a": "effective usage of memory", "b": "easier computations", "c": "to delete elements based on priority", "d": "implement LIFO principle in queues"}, "correct": "a"}}}, "14": {"topic_name": "Queue using Linked List", "mcqs": {"1": {"statement": " In linked list implementation of queue, if only front pointer is maintained, which of the following operation take worst case linear time?", "options": {"a": "Insertion", "b": "Deletion", "c": "To empty a queue", "d": "Both Insertion and To empty a queue"}, "correct": "c"}, "2": {"statement": " In linked list implementation of a queue, where does a new element be inserted?", "options": {"a": "At the head of link list", "b": "At the centre position in the link list", "c": "At the tail of the link list", "d": "At any position in the linked list"}, "correct": "b"}, "3": {"statement": " In linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into a NONEMPTY queue?", "options": {"a": "Only front pointer", "b": "Only rear pointer", "c": "Both front and rear pointer", "d": "No pointer will be changed"}, "correct": "c"}, "4": {"statement": " In linked list implementation of a queue, front and rear pointers are tracked. Which of these pointers will change during an insertion into EMPTY queue?", "options": {"a": "Only front pointer", "b": "Only rear pointer", "c": "Both front and rear pointer", "d": "No pointer will be changed"}, "correct": "a"}, "5": {"statement": " In case of insertion into a linked queue, a node borrowed from the __________ list is inserted in the queue.", "options": {"a": "AVAIL", "b": "FRONT", "c": "REAR", "d": "NULL"}, "correct": "a"}, "6": {"statement": " In linked list implementation of a queue, from where is the item deleted?", "options": {"a": "At the head of link list", "b": "At the centre position in the link list", "c": "At the tail of the link list", "d": "Node before the tail"}, "correct": "a"}, "7": {"statement": " In linked list implementation of a queue, the important condition for a queue to be empty is?", "options": {"a": "FRONT is null", "b": "REAR is null", "c": "LINK is empty", "d": "FRONT==REAR-1"}, "correct": "b"}, "8": {"statement": " The essential condition which is checked before insertion in a linked queue is?", "options": {"a": "Underflow", "b": "Overflow", "c": "Front value", "d": "Rear value"}, "correct": "a"}, "9": {"statement": " The essential condition which is checked before deletion in a linked queue is?", "options": {"a": "Underflow", "b": "Overflow", "c": "Front value", "d": "Rear value"}, "correct": "a"}}}, "15": {"topic_name": "Priority Queue", "mcqs": {"1": {"statement": " With what data structure can a priority queue be implemented?", "options": {"a": "Array", "b": "List", "c": "Heap", "d": "Tree"}, "correct": "c"}, "2": {"statement": " Which of the following is not an application of priority queue?", "options": {"a": "Huffman codes", "b": "Interrupt handling in operating system", "c": "Undo operation in text editors", "d": "Bayesian spam filter"}, "correct": "a"}, "7": {"statement": " What is the time complexity to insert a node based on key in a priority queue?", "options": {"a": "O(nlogn)", "b": "O(logn)", "c": "O(n)", "d": "O(n2)"}, "correct": "c"}}}, "16": {"topic_name": "Double Ended Queue (Dequeue)", "mcqs": {"1": {"statement": " What is a dequeue?", "options": {"a": "A queue with insert/delete defined for both front and rear ends of the queue", "b": "A queue implemented with a doubly linked list", "c": "A queue implemented with both singly and doubly linked lists", "d": "A queue with insert/delete defined for front side of the queue"}, "correct": "a"}, "7": {"statement": " What are the applications of dequeue?", "options": {"a": "A-Steal job scheduling algorithm", "b": "Can be used as both stack and queue", "c": "To find the maximum of all sub arrays of size k", "d": "To avoid collision in hash tables"}, "correct": "d"}}}, "17": {"topic_name": "Queue using Stacks", "mcqs": {"1": {"statement": " A Double-ended queue supports operations such as adding and removing items from both the sides of the queue. They support four operations like addFront(adding item to top of the queue), addRear(adding item to the bottom of the queue), removeFront(removing item from the top of the queue) and removeRear(removing item from the bottom of the queue). You are given only stacks to implement this data structure. You can implement only push and pop operations. What are the total number of stacks required for this operation?(you can reuse the stack)", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "a"}, "2": {"statement": " You are asked to perform a queue operation using a stack. Assume the size of the stack is some value \u2018n\u2019 and there are \u2018m\u2019 number of variables in this stack. The time complexity of performing deQueue operation is (Using only stack operations like push and pop)(Tightly bound).", "options": {"a": "O(m)", "b": "O(n)", "c": "O(m*n)", "d": "Data is insufficient"}, "correct": "a"}, "3": {"statement": " Consider you have an array of some random size. You need to perform dequeue operation. You can perform it using stack operation (push and pop) or using queue operations itself (enQueue and Dequeue). The output is guaranteed to be same. Find some differences?", "options": {"a": "They will have different time complexities", "b": "The memory used will not be different", "c": "There are chances that output might be different", "d": "No differences"}, "correct": "a"}, "4": {"statement": " Consider you have a stack whose elements in it are as follows.\n5 4 3 2 << top\nWhere the top element is 2.\nYou need to get the following stack\n6 5 4 3 2 << top\nThe operations that needed to be performed are (You can perform only push and pop):", "options": {"a": "Push(pop()), push(6), push(pop())", "b": "Push(pop()), push(6)", "c": "Push(pop()), push(pop()), push(6)", "d": "Push(6)"}, "correct": "b"}, "5": {"statement": " A double-ended queue supports operations like adding and removing items from both the sides of the queue. They support four operations like addFront(adding item to top of the queue), addRear(adding item to the bottom of the queue), removeFront(removing item from the top of the queue) and removeRear(removing item from the bottom of the queue). You are given only stacks to implement this data structure. You can implement only push and pop operations. What\u2019s the time complexity of performing addFront and addRear? (Assume \u2018m\u2019 to be the size of the stack and \u2018n\u2019 to be the number of elements)", "options": {"a": "O(m) and O(n)", "b": "O(1) and O(n)", "c": "O(n) and O(1)", "d": "O(n) and O(m)"}, "correct": "a"}, "6": {"statement": " Why is implementation of stack operations on queues not feasible for a large dataset (Asssume the number of elements in the stack to be n)?", "options": {"a": "Because of its time complexity O(n)", "b": "Because of its time complexity O(log(n))", "c": "Extra memory is not required", "d": "There are no problems"}, "correct": "d"}, "7": {"statement": " Consider yourself to be in a planet where the computational power of chips to be slow. You have an array of size 10.You want to perform enqueue some element into this array. But you can perform only push and pop operations .Push and pop operation both take 1 sec respectively. The total time required to perform enQueue operation is?", "options": {"a": "20", "b": "40", "c": "42", "d": "43"}, "correct": "b"}, "8": {"statement": " You have two jars, one jar which has 10 rings and the other has none. They are placed one above the other. You want to remove the last ring in the jar. And the second jar is weak and cannot be used to store rings for a long time.", "options": {"a": "Empty the first jar by removing it one by one from the first jar and placing it into the second jar", "b": "Empty the first jar by removing it one by one from the first jar and placing it into the second jar and empty the second jar by placing all the rings into the first jar one by one", "c": "There exists no possible way to do this", "d": "Break the jar and remove the last one"}, "correct": "c"}, "9": {"statement": " Given only a single array of size 10 and no other memory is available. Which of the following operation is not feasible to implement (Given only push and pop operation)?", "options": {"a": "Push", "b": "Pop", "c": "Enqueue", "d": "Returntop"}, "correct": "d"}}}, "18": {"topic_name": "Stack using Queues", "mcqs": {"1": {"statement": " To implement a stack using queue(with only enqueue and dequeue operations), how many queues will you need?", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "a"}}}, "19": {"topic_name": "Decimal to Binary using Stacks", "mcqs": {"1": {"statement": " Express -15 as a 6-bit signed binary number.", "options": {"a": "001111", "b": "101111", "c": "101110", "d": "001110"}, "correct": "a"}}}, "20": {"topic_name": "Evaluation of an Infix Expression (Not Parenthesized)", "mcqs": {"1": {"statement": " How many stacks are required for applying evaluation of infix expression algorithm?", "options": {"a": "one", "b": "two", "c": "three", "d": "four"}, "correct": "a"}, "2": {"statement": " How many passes does the evaluation of infix expression algorithm makes through the input?", "options": {"a": "One", "b": "Two", "c": "Three", "d": "Four"}, "correct": "a"}, "3": {"statement": " Identify the infix expression from the list of options given below.", "options": {"a": "a/b+(c-d)", "b": "abc*+d+ab+cd+*ce-f-", "c": "ab-c-", "d": "+ab"}, "correct": "b"}, "4": {"statement": " Which of the following statement is incorrect with respect to evaluation of infix expression algorithm?", "options": {"a": "Operand is pushed on to the stack", "b": "If the precedence of operator is higher, pop two operands and evaluate", "c": "If the precedence of operator is lower, pop two operands and evaluate", "d": "The result is pushed on to the operand stack"}, "correct": "c"}, "5": {"statement": " Evaluate the following statement using infix evaluation algorithm and choose the correct answer. 1+2*3-2", "options": {"a": "3", "b": "6", "c": "5", "d": "4"}, "correct": "a"}, "7": {"statement": " Of the following choices, which operator has the lowest precedence?", "options": {"a": "^", "b": "+", "c": "/", "d": "#"}, "correct": "b"}, "9": {"statement": " Evaluate the following and choose the correct answer.\na/b+c*d where a=4, b=2, c=2, d=1.", "options": {"a": "1", "b": "4", "c": "5", "d": "2"}, "correct": "a"}, "10": {"statement": " Evaluate the following statement using infix evaluation algorithm and choose the correct answer. 4*2+3-5/5", "options": {"a": "10", "b": "11", "c": "16", "d": "12"}, "correct": "d"}, "11": {"statement": " Using the evaluation of infix expression, evaluate a^b+c  and choose the correct answer. (a=2, b=2, c=2)", "options": {"a": "12", "b": "8", "c": "10", "d": "6"}, "correct": "a"}, "12": {"statement": " Evaluate the following infix expression using algorithm and choose the correct answer. a+b*c-d/e^f  where a=1, b=2, c=3, d=4, e=2, f=2.", "options": {"a": "6", "b": "8", "c": "9", "d": "7"}, "correct": "c"}}}, "21": {"topic_name": "Evaluation of a Prefix Expression", "mcqs": {"1": {"statement": " How many stacks are required for evaluation of prefix expression?", "options": {"a": "one", "b": "two", "c": "three", "d": "four"}, "correct": "b"}, "2": {"statement": " While evaluating a prefix expression, the string is read from?", "options": {"a": "left to right", "b": "right to left", "c": "center to right", "d": "center to left to right"}, "correct": "a"}, "4": {"statement": " How many types of input characters are accepted by this algorithm?", "options": {"a": "one", "b": "two", "c": "three", "d": "four"}, "correct": "a"}, "5": {"statement": " What determines the order of evaluation of a prefix expression?", "options": {"a": "precedence and associativity", "b": "precedence only", "c": "associativity only", "d": "depends on the parser"}, "correct": "a"}, "9": {"statement": " Using the evaluation of prefix algorithm, evaluate +-9 2 7.", "options": {"a": "10", "b": "4", "c": "17", "d": "14"}, "correct": "c"}}}, "22": {"topic_name": "Evaluation of a Postfix Expression", "mcqs": {"1": {"statement": " What is the other name for a postfix expression?", "options": {"a": "Normal polish Notation", "b": "Reverse polish Notation", "c": "Warsaw notation", "d": "Infix notation"}, "correct": "b"}, "2": {"statement": " Which of the following is an example for a postfix expression?", "options": {"a": "a*b(c+d)", "b": "abc*+de-+", "c": "+ab", "d": "a+b-c"}, "correct": "b"}, "4": {"statement": " What is the time complexity of evaluation of postfix expression algorithm?", "options": {"a": "O (N)", "b": "O (N log N)", "c": "O (N2)", "d": "O (M log N)"}, "correct": "a"}, "6": {"statement": " Which of these operators have the highest order of precedence?", "options": {"a": "\u2018(\u2018 and \u2018)\u2019", "b": "\u2018*\u2019 and \u2018/\u2019", "c": "\u2018~\u2019 and \u2018^\u2019", "d": "\u2018+\u2019 and \u2018-\u2018"}, "correct": "d"}, "7": {"statement": " Which of the following is not an application of stack?", "options": {"a": " evaluation of postfix expression", "b": " conversion of infix to postfix expression", "c": " balancing symbols", "d": " line at ticket counter"}, "correct": "b"}, "8": {"statement": " While evaluating a postfix expression, when an operator is encountered, what is the correct operation to be performed?", "options": {"a": "push it directly on to the stack", "b": "pop 2 operands, evaluate them and push the result on to the stack", "c": "pop the entire stack", "d": "ignore the operator"}, "correct": "a"}, "9": {"statement": " Which of the following statement is incorrect?", "options": {"a": "Postfix operators use value to their right", "b": "Postfix operators use value to their left", "c": "Prefix operators use value to their right", "d": "In postfix expression, operands are followed by operators"}, "correct": "d"}, "10": {"statement": " What is the result of the given postfix expression?  abc*+ where a=1, b=2, c=3.", "options": {"a": "4", "b": "5", "c": "6", "d": "7"}, "correct": "a"}, "11": {"statement": " What is the result of the following postfix expression?\n  ab*cd*+ where a=2,b=2,c=3,d=4.", "options": {"a": "16", "b": "12", "c": "14", "d": "10"}, "correct": "a"}, "12": {"statement": " Consider the stack\n| 5 |\n| 4 |\n| 3 |\n| 2 |.\nAt this point, \u2018*\u2019 is encountered. What has to be done?", "options": {"a": "5*4=20 is pushed into the stack", "b": "* is pushed into the stack", "c": "2*3=6 is pushed into the stack", "d": "* is ignored"}, "correct": "c"}, "13": {"statement": " Evaluate the postfix expression ab + cd/- where a=5, b=4, c=9, d=3.", "options": {"a": "23", "b": "15", "c": "6", "d": "10"}, "correct": "b"}, "14": {"statement": " Evaluate and write the result for the following postfix expression\n   abc*+de*f+g*+ where a=1, b=2, c=3, d=4, e=5, f=6, g=2.", "options": {"a": "61", "b": "59", "c": "60", "d": "55"}, "correct": "a"}}}, "23": {"topic_name": "Infix to Prefix Conversion", "mcqs": {"1": {"statement": " What data structure is used when converting an infix notation to prefix notation?", "options": {"a": "Stack", "b": "Queue", "c": "B-Trees", "d": "Linked-list"}, "correct": "c"}, "8": {"statement": " Out of the following operators (^, *, +, &, $), the one having highest priority is _________", "options": {"a": "+", "b": "$", "c": "^", "d": "&"}, "correct": "b"}, "9": {"statement": " Out of the following operators (|, *, +, &, $), the one having lowest priority is ________", "options": {"a": "+", "b": "$", "c": "|", "d": "&"}, "correct": "a"}}}, "24": {"topic_name": "Infix to Postfix Conversion", "mcqs": {"1": {"statement": " When an operand is read, which of the following is done?", "options": {"a": "It is placed on to the output", "b": "It is placed in operator stack", "c": "It is ignored", "d": "Operator stack is emptied"}, "correct": "c"}, "2": {"statement": " What should be done when a left parenthesis \u2018(\u2018 is encountered?", "options": {"a": "It is ignored", "b": "It is placed in the output", "c": "It is placed in the operator stack", "d": "The contents of the operator stack is emptied"}, "correct": "a"}, "3": {"statement": " Which of the following is an infix expression?", "options": {"a": "(a+b)*(c+d)", "b": "ab+c*", "c": "+ab", "d": "abc+*"}, "correct": "b"}, "4": {"statement": " What is the time complexity of an infix to postfix conversion algorithm?", "options": {"a": "O(N log N)", "b": "O(N)", "c": "O(N2)", "d": "O(M log N)"}, "correct": "a"}, "13": {"statement": " Which of the following statement is incorrect with respect to infix to postfix conversion algorithm?", "options": {"a": "operand is always placed in the output", "b": "operator is placed in the stack when the stack operator has lower precedence", "c": "parenthesis are included in the output", "d": "higher and equal priority operators follow the same condition"}, "correct": "c"}, "14": {"statement": " In infix to postfix conversion algorithm, the operators are associated from?", "options": {"a": "right to left", "b": "left to right", "c": "centre to left", "d": "centre to right"}, "correct": "b"}}}, "25": {"topic_name": "Prefix to Infix Conversion", "mcqs": {}}, "26": {"topic_name": "Postfix to Infix Conversion", "mcqs": {"1": {"statement": " Which of the following data structure is used to convert postfix expression to infix expression?", "options": {"a": "Stack", "b": "Queue", "c": "Linked List", "d": "Heap"}, "correct": "c"}, "2": {"statement": " The postfix expression abc+de/*- is equivalent to which of the following infix expression?", "options": {"a": "abc+-de*/", "b": "(a+b)-d/e*c", "c": "a-(b+c)*(d/e)", "d": "abc+*-(d/e)"}, "correct": "d"}, "3": {"statement": " The equivalent infix expression and value for the postfix form 1 2 + 3 * 4 5 * \u2013 will be ___________", "options": {"a": "1 + 2 * 3 \u2013 4 * 5 and -13", "b": "(2 + 1) * (3 \u2013 4) * 5 and 13", "c": "1 + 2 * (3 \u2013 4) * 5 and -11", "d": "(1 + 2) * 3 \u2013 (4 * 5) and -11"}, "correct": "d"}, "4": {"statement": " What is the value of the postfix expression  2 3 + 4 5 6 \u2013 \u2013 *", "options": {"a": "19", "b": "21", "c": "-4", "d": "25"}, "correct": "d"}, "5": {"statement": " The prefix expression of the postfix expression AB+CD-* is __________", "options": {"a": "(A+B)*(C-D)", "b": "+AB*-CD", "c": "A+*BCD-", "d": "*+AB-CD"}, "correct": "c"}, "6": {"statement": " Consider the postfix expression 4 5 6 a b 7 8 a c, where a, b, c are operators. Operator a has higher precedence over operators b and c. Operators b and c are right associative. Then, equivalent infix expression is", "options": {"a": "4 a 5 6  b 7 8 a c", "b": "4 a 5 c 6 b 7 a 8", "c": "4 b 5 a 6 c 7 a 8", "d": "4 a 5 b 6 c 7 a 8"}, "correct": "a"}, "8": {"statement": " Which of the following is valid reverse polish expression?", "options": {"a": "a op b", "b": "op a b", "c": "a b op", "d": "both op a b and a b op"}, "correct": "b"}}}, "27": {"topic_name": "Towers of Hanoi", "mcqs": {"1": {"statement": " The optimal data structure used to solve Tower of Hanoi is _________", "options": {"a": "Tree", "b": "Heap", "c": "Priority queue", "d": "Stack"}, "correct": "a"}, "6": {"statement": " Which among the following is not a palindrome?", "options": {"a": "Madam", "b": "Dad", "c": "Malayalam", "d": "Maadam"}, "correct": "b"}}}, "28": {"topic_name": "Reverse a Word using Stack", "mcqs": {"2": {"statement": " Which is the most appropriate data structure for reversing a word?", "options": {"a": "queue", "b": "stack", "c": "tree", "d": "graph"}, "correct": "a"}, "4": {"statement": " What is the time complexity of reversing a word using stack algorithm?", "options": {"a": "O (N log N)", "b": "O (N2)", "c": "O (N)", "d": "O (M log N)"}, "correct": "c"}, "5": {"statement": " What will be the word obtained if the word \u201cabbcabb\u201d is reversed using a stack?", "options": {"a": "bbabbca", "b": "abbcabb", "c": "bbacbba", "d": "bbacabb"}, "correct": "a"}, "6": {"statement": " How many stacks are required for reversing a word algorithm?", "options": {"a": "one", "b": "two", "c": "three", "d": "four"}, "correct": "b"}, "7": {"statement": " What will be result if the given stack is popped?\n", "options": {"a": "pat", "b": "tap", "c": "atp", "d": "apt"}, "correct": "b"}, "11": {"statement": " How will your stack look like if the word \u2018java\u2019 is pushed?", "options": {"a": "", "b": "", "c": "", "d": ""}, "correct": "c"}}}, "29": {"topic_name": "Balanced Parenthesis", "mcqs": {"1": {"statement": " What is the time complexity of balancing parentheses algorithm?", "options": {"a": "O (N)", "b": "O (N log N)", "c": "O (M log N)", "d": "O (N2)"}, "correct": "a"}, "2": {"statement": " Which application of stack is used to ensure that the pair of parentheses is properly nested?", "options": {"a": "Balancing symbols", "b": "Reversing a stack", "c": "Conversion of an infix to postfix expression", "d": "Conversion of an infix to prefix expression"}, "correct": "b"}, "3": {"statement": " In balancing parentheses algorithm, the string is read from?", "options": {"a": "right to left", "b": "left to right", "c": "center to right", "d": "center to left"}, "correct": "a"}, "4": {"statement": " Which is the most appropriate data structure for applying balancing of symbols algorithm?", "options": {"a": "stack", "b": "queue", "c": "tree", "d": "graph"}, "correct": "d"}, "5": {"statement": " Which of the following does the balancing symbols algorithm include?", "options": {"a": "balancing double quotes", "b": "balancing single quotes", "c": "balancing operators and brackets", "d": "balancing parentheses, brackets and braces"}, "correct": "b"}, "6": {"statement": " Which of the following statement is incorrect with respect to balancing symbols algorithm?", "options": {"a": "{[()]}", "b": "([ )] ", "c": "{( )}", "d": "{ [ ] }"}, "correct": "a"}, "7": {"statement": " What should be done when an opening parentheses is read in a balancing symbols algorithm?", "options": {"a": "push it on to the stack", "b": "throw an error", "c": "ignore the parentheses", "d": "pop the stack"}, "correct": "c"}, "8": {"statement": " When the corresponding end bracket/braces/parentheses is not found, what happens?", "options": {"a": "The stack is popped", "b": "Ignore the parentheses", "c": "An error is reported", "d": "It is treated as an exception"}, "correct": "b"}, "9": {"statement": " If the corresponding end bracket/braces/parentheses is encountered, which of the following is done?", "options": {"a": "push it on to the stack", "b": "pop the stack", "c": "throw an error", "d": "treated as an exception"}, "correct": "a"}, "12": {"statement": " How many passes does the balancing symbols algorithm makes through the input?", "options": {"a": "one", "b": "two", "c": "three", "d": "four"}, "correct": "c"}}}, "30": {"topic_name": "Bit Array", "mcqs": {"1": {"statement": " What is a bit array?", "options": {"a": "Data structure for representing arrays of records", "b": "Data structure that compactly stores bits", "c": "An array in which most of the elements have the same value", "d": "Array in which elements are not present in continuous locations"}, "correct": "a"}, "2": {"statement": " Which of the following bitwise operations will you use to set a particular bit to 1?", "options": {"a": "OR", "b": "AND", "c": "XOR", "d": "NOR"}, "correct": "b"}, "3": {"statement": " Which of the following bitwise operations will you use to set a particular bit to 0?", "options": {"a": "OR", "b": "AND", "c": "XOR", "d": "NAND"}, "correct": "c"}, "4": {"statement": " Which of the following bitwise operations will you use to toggle a particular bit?", "options": {"a": "OR", "b": "AND", "c": "XOR", "d": "NOT"}, "correct": "d"}, "5": {"statement": " Which of the following is not an advantage of bit array?", "options": {"a": "Exploit bit level parallelism", "b": "Maximal use of data cache", "c": "Can be stored and manipulated in the register set for long periods of time", "d": "Accessing Individual Elements is easy"}, "correct": "d"}, "6": {"statement": " Which of the following is not a disadvantage of bit array?", "options": {"a": "Without compression, they might become sparse", "b": "Accessing individual bits is expensive", "c": "Compressing bit array to byte/word array, the machine also has to support byte/word addressing", "d": "Storing and Manipulating in the register set for long periods of time"}, "correct": "d"}, "7": {"statement": " Which of the following is/are not applications of bit arrays?", "options": {"a": "Used by the Linux kernel", "b": "For the allocation of memory pages", "c": "Bloom filter", "d": "Implementation of Vectors and Matrices"}, "correct": "a"}, "8": {"statement": " Which class in Java can be used to represent bit array?", "options": {"a": "BitSet", "b": "BitVector", "c": "BitArray", "d": "BitStream"}, "correct": "b"}, "9": {"statement": " Which of the following bitwise operator will you use to invert all the bits in a bit array?", "options": {"a": "OR", "b": "NOT", "c": "XOR", "d": "NAND"}, "correct": "a"}, "11": {"statement": " What does Hamming weight/population count mean in Bit arrays?", "options": {"a": "Finding the number of 1 bit in a bit array", "b": "Finding the number of 0 bit in a bit array", "c": "Finding the sum of bits in a bit array", "d": "Finding the average number of 1\u2019s and 0\u2019s in bit arrays"}, "correct": "b"}}}, "31": {"topic_name": "Dynamic Array", "mcqs": {"1": {"statement": " What is a dynamic array?", "options": {"a": "A variable size data structure", "b": "An array which is created at runtime", "c": "The memory to the array is allocated at runtime", "d": "An array which is reallocated everytime whenever new elements have to be added"}, "correct": "c"}, "2": {"statement": " What is meant by physical size in a dynamic array?", "options": {"a": "The size allocated to elements", "b": "The size extended to add new elements", "c": "The size of the underlying array at the back-end", "d": "The size visible to users"}, "correct": "c"}, "3": {"statement": " The number of items used by the dynamic array contents is its __________", "options": {"a": "Physical size", "b": "Capacity", "c": "Logical size", "d": "Random size"}, "correct": "d"}, "4": {"statement": " How will you implement dynamic arrays in Java?", "options": {"a": "Set", "b": "Map", "c": "HashMap", "d": "List"}, "correct": "a"}, "5": {"statement": " Which of the following is the correct syntax to declare an ArrayList in Java?", "options": {"a": "ArrayList al = new ArrayList();", "b": "ArrayList al = new ArrayList[];", "c": "ArrayList al() = new ArrayList();", "d": "ArrayList al[] = new ArrayList[];"}, "correct": "c"}, "6": {"statement": " Array is divided into two parts in ____________", "options": {"a": "Hashed Array Tree", "b": "Geometric Array", "c": "Bounded-size dynamic array", "d": "Sparse Array"}, "correct": "d"}, "7": {"statement": " Which of the following is a disadvantage of dynamic arrays?", "options": {"a": "Locality of reference", "b": "Data cache utilization", "c": "Random access", "d": "Memory leak"}, "correct": "b"}, "8": {"statement": " What is the time complexity for inserting/deleting at the beginning of the array?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(logn)", "d": "O(nlogn)"}, "correct": "a"}, "10": {"statement": " The size of the dynamic array is deallocated if the array size is less than _________% of the backend physical size.", "options": {"a": "30", "b": "40", "c": "10", "d": "20"}, "correct": "b"}, "12": {"statement": " In which of the following cases dynamic arrays are not preferred?", "options": {"a": "If the size of the array is unknown", "b": "If the size of the array changes after few iterations", "c": "If the memory reallocation takes more time i.e. expensive", "d": "If the array holds less number of elements"}, "correct": "b"}, "13": {"statement": " The growth factor of ArrayList in Java is _______", "options": {"a": "1", "b": "1.5", "c": "2", "d": "0"}, "correct": "a"}, "14": {"statement": " In special case, the time complexity of inserting/deleting elements at the end of dynamic array is __________", "options": {"a": "O (n)", "b": "O (n1/2)", "c": "O (log n)", "d": "O (1)"}, "correct": "b"}}}, "32": {"topic_name": "Parallel Array", "mcqs": {"1": {"statement": " What are parallel arrays?", "options": {"a": "Arrays of the same size", "b": "Arrays allocated one after the other", "c": "Arrays of the same number of elements", "d": "Arrays allocated dynamically"}, "correct": "a"}, "6": {"statement": " Which of the following is a disadvantage of parallel array over the traditional arrays?", "options": {"a": "When a language does not support records, parallel arrays can be used", "b": "Increased locality of reference", "c": "Ideal cache behaviour", "d": "Insertion and Deletion becomes tedious"}, "correct": "d"}, "7": {"statement": " Which of the following is an advantage of parallel arrays?", "options": {"a": "Poor locality of reference for non-sequential access", "b": "Very little direct language support", "c": "Expensive to shrink or grow", "d": "Increased Locality of Reference"}, "correct": "c"}}}, "33": {"topic_name": "Sparse Array", "mcqs": {"1": {"statement": " What is a sparse array?", "options": {"a": "Data structure for representing arrays of records", "b": "Data structure that compactly stores bits", "c": "An array in which most of the elements have the same value", "d": "An array in which memory is allocated in run time"}, "correct": "b"}, "2": {"statement": " When do you use a sparse array?", "options": {"a": "When there are unique elements in the array", "b": "When the array has more occurrence of zero elements", "c": "When the data type of elements differ", "d": "When elements are sorted"}, "correct": "b"}, "3": {"statement": " What is the difference between a normal(naive) array and a sparse array?", "options": {"a": "Sparse array can hold more elements than a normal array", "b": "Sparse array is memory efficient", "c": "Sparse array is dynamic", "d": "A naive array is more efficient"}, "correct": "a"}}}, "34": {"topic_name": "Suffix Array", "mcqs": {"1": {"statement": " Which of the following is false?", "options": {"a": "Suffix array is always sorted", "b": "Suffix array is used in string matching problems", "c": "Suffix array is always unsorted", "d": "Suffix array contains all the suffixes of the given string"}, "correct": "a"}, "2": {"statement": " Suffix array of the string \u201cstatistics\u201d is ____________", "options": {"a": "2 8 7 4 9 0 5 1 6 3", "b": "2 7 4 9 8 0 5 1 6 3", "c": "2 4 9 0 5 7 8 1 6 3", "d": "2 8 7 0 5 1 6 9 4 3"}, "correct": "c"}, "3": {"statement": " Suffix array can be created by performing __________ traversal of a suffix tree.", "options": {"a": "breadth-first", "b": "level order", "c": "depth-first", "d": "either breadth-first or level order"}, "correct": "b"}, "5": {"statement": " If comparison based sorting algorithm is used construct the suffix array, then what will be time required to construct the suffix array?", "options": {"a": "O(nlogn)", "b": "O(n2)", "c": "O(n2logn)", "d": "O(n2) + O(logn)"}, "correct": "d"}, "6": {"statement": " What will be the suffix array of the string \u201cengineering\u201d?", "options": {"a": "2 3 8 4 9 1 7 5 0 6 10", "b": "5 0 6 1 4 9 1 7 0 2 3 8", "c": "5 0 6 10 2 4 9 1 7 3 8", "d": "5 0 6 10 2 3 8 4 9 1 7"}, "correct": "c"}, "7": {"statement": " LCP array and ______ is used to construct suffix tree.", "options": {"a": "Hash tree", "b": "Hash trie", "c": "Suffix array", "d": "Balanced tree"}, "correct": "d"}, "8": {"statement": " What is the time required to locate the occurrences of a pattern P of length m in a string of length n using suffix array?", "options": {"a": "O(nm)", "b": "O(n2)", "c": "O(mnlogn)", "d": "O(mlogn)"}, "correct": "a"}}}, "35": {"topic_name": "Matrix", "mcqs": {"1": {"statement": " What is the order of a matrix?", "options": {"a": "number of rows X number of columns", "b": "number of columns X number of rows", "c": "number of rows X number of rows", "d": "number of columns X number of columns"}, "correct": "c"}, "2": {"statement": " Which of the following property does not hold for matrix multiplication?", "options": {"a": "Associative", "b": "Distributive", "c": "Commutative", "d": "Additive Inverse"}, "correct": "b"}, "3": {"statement": " How do you allocate a matrix using a single pointer in C?(r and c are the number of rows and columns respectively)", "options": {"a": "int *arr = malloc(r * c * sizeof(int));", "b": "int *arr = (int *)malloc(r * c * sizeof(int));", "c": "int *arr = (int *)malloc(r + c * sizeof(int));", "d": "int *arr = (int *)malloc(r * c * sizeof(arr));"}, "correct": "a"}}}, "36": {"topic_name": "Sparse Matrix", "mcqs": {"1": {"statement": " Which matrix has most of the elements (not all) as Zero?", "options": {"a": "Identity Matrix", "b": "Unit Matrix", "c": "Sparse Matrix", "d": "Zero Matrix"}, "correct": "a"}, "2": {"statement": " What is the relation between Sparsity and Density of a matrix?", "options": {"a": "Sparsity = 1 \u2013 Density", "b": "Sparsity = 1 + Density", "c": "Sparsity = Density*Total number of elements", "d": "Sparsity = Density/Total number of elements"}, "correct": "a"}, "3": {"statement": " Who coined the term Sparse Matrix?", "options": {"a": "Harry Markowitz", "b": "James Sylvester", "c": "Chris Messina", "d": "Arthur Cayley"}, "correct": "a"}, "5": {"statement": " The matrix contains m rows and n columns. The matrix is called Sparse Matrix if ________", "options": {"a": "Total number of Zero elements > (m*n)/2", "b": "Total number of Zero elements = m + n", "c": "Total number of Zero elements = m/n", "d": "Total number of Zero elements = m-n"}, "correct": "d"}, "6": {"statement": " Which of the following is not the method to represent Sparse Matrix?", "options": {"a": "Dictionary of Keys", "b": "Linked List", "c": "Array", "d": "Heap"}, "correct": "b"}, "8": {"statement": " Which one of the following is a Special Sparse Matrix?", "options": {"a": "Band Matrix", "b": "Skew Matrix", "c": "Null matrix", "d": "Unit matrix"}, "correct": "b"}}}, "37": {"topic_name": "Count Inversion", "mcqs": {"1": {"statement": " What does the number of inversions in an array indicate?", "options": {"a": "mean value of the elements of array", "b": "measure of how close or far the array is from being sorted", "c": "the distribution of values in the array", "d": "median value of the elements of array"}, "correct": "a"}, "2": {"statement": " How many inversions does a sorted array have?", "options": {"a": "0", "b": "1", "c": "2", "d": "cannot be determined"}, "correct": "d"}, "3": {"statement": " What is the condition for two elements arr[i] and arr[j] to form an inversion?", "options": {"a": "arr[i]<arr[j] ", "b": "i < j", "c": "arr[i] < arr[j] and i < j", "d": "arr[i] > arr[j] and i < j"}, "correct": "b"}, "4": {"statement": " Under what condition the number of inversions in an array are maximum?", "options": {"a": "when the array is sorted", "b": "when the array is reverse sorted", "c": "when the array is half sorted", "d": "depends on the given array"}, "correct": "a"}, "5": {"statement": " Under what condition the number of inversions in an array are minimum?", "options": {"a": "when the array is sorted", "b": "when the array is reverse sorted", "c": "when the array is half sorted", "d": "depends on the given array"}, "correct": "d"}, "6": {"statement": " How many inversions are there in the array arr = {1,5,4,2,3}?", "options": {"a": "0", "b": "3", "c": "4", "d": "5"}, "correct": "b"}, "7": {"statement": " Which of the following form inversion in the array arr = {1,5,4,2}?", "options": {"a": "(5,4), (5,2)", "b": "(5,4), (5,2), (4,2)", "c": "(1,5), (1,4), (1,2)", "d": "(1,5)"}, "correct": "b"}}}, "38": {"topic_name": "Rotation Array Operation", "mcqs": {"1": {"statement": " What will be the resulting array after rotating arr[]={1, 2, 3, 4, 5} by 2?", "options": {"a": "2, 1, 3, 4, 5", "b": "3, 4, 5, 1, 2", "c": "4, 5, 1, 2, 3", "d": "1, 2, 3, 5, 4"}, "correct": "a"}}}, "39": {"topic_name": "Reversal Array Operation", "mcqs": {"1": {"statement": " What will be the resulting array after reversing arr[]={3,5,4,2}?", "options": {"a": "2,3,5,4", "b": "4,2,3,5", "c": "5,4,2,3", "d": "2,4,5,3"}, "correct": "a"}, "2": {"statement": " How many swaps are required for reversing an array having n elements where n is an odd number?", "options": {"a": "(n-1) / 2", "b": "n/2", "c": "(n/2) \u2013 1", "d": "(n+1)/2"}, "correct": "b"}, "3": {"statement": " How many swaps are required for reversing an array having n elements where n is an even number?", "options": {"a": "(n-1) / 2", "b": "n/2", "c": "(n/2) \u2013 1", "d": "(n+1)/2"}, "correct": "c"}}}, "40": {"topic_name": "Number of Jumps to Reach End-array Operation", "mcqs": {"1": {"statement": " What will be the minimum number of jumps required to reach the end of the array arr[] = {1,3,6,3,6,8,5}?", "options": {"a": "1", "b": "2", "c": "3", "d": "not possible to reach the end"}, "correct": "d"}, "2": {"statement": " What will be the minimum number of jumps required to reach the end of the array arr[] ={0,1,3,6,3,6,8,5}?", "options": {"a": "1", "b": "2", "c": "3", "d": "not possible to reach the end"}, "correct": "c"}, "9": {"statement": " What will be the minimum number of jumps required to reach the end of the array arr[] = {1,2,0,0,3,6,8,5}?", "options": {"a": "1", "b": "2", "c": "3", "d": "not possible to reach the end"}, "correct": "d"}, "11": {"statement": " In how many different ways we can reach the end of the array arr[]={1,3,5,8,9}?", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "a"}}}, "41": {"topic_name": "Skip List", "mcqs": {"1": {"statement": " What is a skip list?", "options": {"a": "a linkedlist with size value in nodes", "b": "a linkedlist that allows faster search within an ordered sequence", "c": "a linkedlist that allows slower search within an ordered sequence", "d": "a tree which is in the form of linked list"}, "correct": "a"}, "2": {"statement": " Consider the 2-level skip list\n\nHow to access 38?", "options": {"a": "travel 20-30-35-38", "b": "travel 20-30-40-38", "c": "travel 20-38", "d": "travel 20-40-38"}, "correct": "d"}, "3": {"statement": " Skip lists are similar to which of the following datastructure?", "options": {"a": "stack", "b": "heap", "c": "binary search tree", "d": "balanced binary search tree"}, "correct": "a"}, "4": {"statement": "  What is the time complexity improvement of skip lists from linked lists in insertion and deletion?", "options": {"a": "O(n) to O(logn) where n is number of elements", "b": "O(n) to O(1) where n is number of elements", "c": "no change", "d": "O(n) to O(n2) where n is number of elements"}, "correct": "a"}, "5": {"statement": " To which datastructure are skip lists similar to in terms of time complexities in worst and best cases?", "options": {"a": "balanced binary search trees", "b": "binary search trees", "c": "binary trees", "d": "linked lists"}, "correct": "a"}, "6": {"statement": " The nodes in a skip list may have many forward references. their number is determined", "options": {"a": "probabilistically", "b": "randomly", "c": "sequentially", "d": "orthogonally"}, "correct": "a"}, "8": {"statement": " How to maintain multi-level skip list properties when insertions and deletions are done?", "options": {"a": "design each level of a multi-level skip list with varied probabilities", "b": "that cannot be maintained", "c": "rebalancing of lists", "d": "reconstruction"}, "correct": "a"}}}, "42": {"topic_name": "Self Organizing List", "mcqs": {"1": {"statement": " The self organizing list improves the efficiency of _______", "options": {"a": "binary search", "b": "jump search", "c": "sublist search", "d": "linear search"}, "correct": "c"}, "2": {"statement": " Which of the following is true about the Move-To-Front Method for rearranging nodes?", "options": {"a": "node with highest access count is moved to head of the list", "b": "requires extra storage", "c": "may over-reward infrequently accessed nodes", "d": "requires a counter for each node"}, "correct": "a"}, "3": {"statement": " What technique is used in Transpose method?", "options": {"a": "searched node is swapped with its predecessor", "b": "node with highest access count is moved to head of the list", "c": "searched node is swapped with the head of list", "d": "searched nodes are rearranged based on their proximity to the head node"}, "correct": "c"}, "4": {"statement": " The worst case running time of a linear search on the self organizing list is ____", "options": {"a": "O(1)", "b": "O(logn)", "c": "O(n)", "d": "O(n2)"}, "correct": "c"}, "5": {"statement": " Which of the following data structure is preferred to have lesser search time when the list size is small?", "options": {"a": "search tree", "b": "sorted list", "c": "self organizing list", "d": "linked list"}, "correct": "b"}, "6": {"statement": " In _____________ method, whenever a node is accessed, it might move to the head of the list if its number of accesses becomes greater than the records preceding it.", "options": {"a": "least recently used", "b": "count", "c": "traspose", "d": "exchange"}, "correct": "c"}, "7": {"statement": " Symbol tables during compilation of program is efficiently implemented using __________", "options": {"a": "a singly linked list", "b": "a doubly linked list", "c": "a self organizing list", "d": "an array"}, "correct": "b"}, "8": {"statement": " Which of the following method performs poorly when elements are accessed in sequential order?", "options": {"a": "count method", "b": "move to front method", "c": "transpose meth", "d": "ordering method"}, "correct": "a"}, "9": {"statement": " The self organizing list improves _____", "options": {"a": "average access time", "b": "insertion", "c": "deletion", "d": "binary search"}, "correct": "d"}}}, "43": {"topic_name": "Xor Linked List", "mcqs": {"1": {"statement": " What is xor linked list?", "options": {"a": "uses of bitwise XOR operation to decrease storage requirements for doubly linked lists", "b": "uses of bitwise XOR operation to decrease storage requirements for linked lists", "c": "uses of bitwise operations to decrease storage requirements for doubly linked lists", "d": "just another form of linked list"}, "correct": "a"}, "2": {"statement": " What does a xor linked list have?", "options": {"a": "every node stores the XOR of addresses of previous and next nodes", "b": "actuall memory address of next node", "c": "every node stores the XOR of addresses of previous and next two nodes", "d": "every node stores xor 0 and the current node address"}, "correct": "a"}, "3": {"statement": " What does first and last nodes of a xor linked lists contain ? (let address of first and last be A and B)", "options": {"a": "NULL xor A and B xor NULL", "b": "NULL and NULL", "c": "A and B", "d": "NULL xor A and B"}, "correct": "d"}, "4": {"statement": " Which of the following is an advantage of XOR list?", "options": {"a": "Almost of debugging tools cannot follow the XOR chain, making debugging difficult", "b": "You need to remember the address of the previously accessed node in order to calculate the next node\u2019s address", "c": "In some contexts XOR of pointers is not defined", "d": "XOR list decreases the space requirement in doubly linked list"}, "correct": "d"}, "5": {"statement": " Which of the following is not the properties of XOR lists?", "options": {"a": "X\u2295X = 0", "b": "X\u22950 = X", "c": "(X\u2295Y)\u2295Z = X\u2295(Y\u2295Z)", "d": "X\u22950 = 1"}, "correct": "b"}, "6": {"statement": " Which of the following statements are true?\ni) practical application of XOR linked lists are in environments with limited space requirements, such as embedded devices.\nii)xor lists are not suitable because most garbage collectors will fail to work properly with classes or structures that don\u2019t contain literal pointers\niii)in order to calculate the address of the next node you need to remember the address of the previous node\niv)xor lists are much efficient than single, doubly linked lists and arrays", "options": {"a": "i, ii, iii, iv", "b": "i, ii, iii", "c": "i, ii", "d": "i"}, "correct": "b"}, "9": {"statement": " Given 10,8,6,7,9\nswap the above numbers such that finally you got 6,7,8,9,10\nso now reverse 10\n9,7,6,8,10\nnow reverse 9\n8,6,7,9,10\n7,6,8,9,10\n6,7,8,9,10\nat this point 6 is ahead so no more reversing can be done so stop.\nTo implement above algorithm which datastructure is better and why ?", "options": {"a": "linked list. because we can swap elements easily", "b": "arrays. because we can swap elements easily", "c": "xor linked list. because there is no overhead of pointers and so memory is saved", "d": "doubly linked list. because you can traverse back and forth"}, "correct": "b"}}}, "44": {"topic_name": "Free List", "mcqs": {"1": {"statement": " Free lists are used in", "options": {"a": "static memory allocation", "b": "dynamic memory allocation", "c": "contagious allocations", "d": "are used for speeding up linked list operations"}, "correct": "a"}, "2": {"statement": " What are implicit and explicit implementations of freelists?", "options": {"a": "garbage collection and new or malloc operators respectively", "b": "new or malloc and garbage collection respectively", "c": "implicit implementation is not favored", "d": "explicit implementation is not favored"}, "correct": "b"}, "3": {"statement": " What datastructures can be used in implementing a free list?", "options": {"a": "only linked list", "b": "linked list or sort trees", "c": "arrays", "d": "trees"}, "correct": "a"}, "4": {"statement": " What are different ways of implementing free lists and which is simple among them?", "options": {"a": "best fit, first fit, worst fit, simple-first fit", "b": "best fit, first fit, worst fit, simple-best fit", "c": "best fit, first fit, worst fit, simple-worst fit", "d": "best fit  simple-best fit"}, "correct": "b"}, "5": {"statement": " What is buddy memory management of free lists ?", "options": {"a": "modified version of first fit", "b": "buddy allocation keeps several\u202d \u202cfree lists,\u202d \u202ceach one holds blocks which are of one particular size", "c": "modified version of best fit", "d": "a tree representation of free lists"}, "correct": "c"}, "6": {"statement": " How does implicit free lists(garbage collection) works in adding memory to free list ?", "options": {"a": "whichever comes last will be added to free list", "b": "whichever comes first will be added to free list", "c": "certain blocks cannot be used if there are no pointers to them and hence they can be freed", "d": "makes a probabilistic guess"}, "correct": "d"}, "7": {"statement": " What are the disadvantages in implementing buddy system algorithm for free lists?", "options": {"a": "internal fragmentation", "b": "it takes so much space", "c": "we no more have the hole lists in order of memory address, so it is difficult to detect if 2 holes remain adjacent in memory and shall be merged into one hole", "d": "both a and c are correct"}, "correct": "a"}}}, "45": {"topic_name": "Binary Trees using Array", "mcqs": {"1": {"statement": " How many children does a binary tree have?", "options": {"a": "2", "b": "any number of children", "c": "0 or 1 or 2", "d": "0 or 1"}, "correct": "c"}, "2": {"statement": " What is/are the disadvantages of implementing tree using normal arrays?", "options": {"a": "difficulty in knowing children nodes of a node", "b": "difficult in finding the parent of a node", "c": "have to know the maximum number of nodes possible before creation of trees", "d": "difficult to implement"}, "correct": "a"}, "3": {"statement": " What must be the ideal size of array if the height of tree is \u2018l\u2019?", "options": {"a": "2l-1", "b": "l-1", "c": "l", "d": "2l"}, "correct": "a"}, "4": {"statement": " What are the children for node \u2018w\u2019 of a complete-binary tree in an array representation?", "options": {"a": "2w and 2w+1", "b": "2+w and 2-w", "c": "w+1/2 and w/2", "d": "w-1/2 and w+1/2"}, "correct": "a"}, "5": {"statement": " What is the parent for a node \u2018w\u2019 of a complete binary tree in an array representation when w is not 0?", "options": {"a": "floor(w-1/2)", "b": "ceil(w-1/2)", "c": "w-1/2", "d": "w/2"}, "correct": "a"}, "6": {"statement": " If the tree is not a complete binary tree then what changes can be made for easy access of children of a node in the array?", "options": {"a": "every node stores data saying which of its children exist in the array", "b": "no need of any changes continue with 2w and 2w+1, if node is at i", "c": "keep a seperate table telling children of a node", "d": "use another array parallel to the array with tree"}, "correct": "a"}}}, "46": {"topic_name": "Binary Trees using Linked Lists", "mcqs": {"1": {"statement": " Advantages of linked list representation of binary trees over arrays?", "options": {"a": "dynamic size", "b": "ease of insertion/deletion", "c": "ease in randomly accessing a node", "d": "both dynamic size and ease in insertion/deletion"}, "correct": "d"}, "2": {"statement": " Disadvantages of linked list representation of binary trees over arrays?", "options": {"a": "Randomly accessing is not possible", "b": "Extra memory for a pointer is needed with every element in the list", "c": "Difficulty in deletion", "d": "Random access is not possible and extra memory with every element"}, "correct": "d"}, "3": {"statement": " Which of the following traversing algorithm is not used to traverse in a tree?", "options": {"a": "Post order", "b": "Pre order", "c": "Post order", "d": "Randomized"}, "correct": "a"}, "4": {"statement": " Level order traversal of a tree is formed with the help of", "options": {"a": "breadth first search", "b": "depth first search", "c": "dijkstra\u2019s algorithm", "d": "prims algorithm"}, "correct": "d"}, "5": {"statement": " Identify the reason which doesn\u2019t play a key role to use threaded binary trees?", "options": {"a": "The storage required by stack and queue is more", "b": "The pointers in most of nodes of a binary tree are NULL", "c": "It is Difficult to find a successor node", "d": "They occupy less size"}, "correct": "d"}, "6": {"statement": " The following lines talks about deleting a node in a binary tree.(the tree property must not be violated after deletion)\ni) from root search for the node to be deleted\nii)\niii) delete the node at\nwhat must be statement ii) and fill up statement iii)", "options": {"a": "ii)-find random node,replace with node to be deleted. iii)- delete the node", "b": "ii)-find node to be deleted. iii)- delete the node at found location", "c": "ii)-find deepest node,replace with node to be deleted. iii)- delete a node", "d": "ii)-find deepest node,replace with node to be deleted. iii)- delete the deepest node"}, "correct": "a"}, "7": {"statement": " What may be the psuedo code for finding the size of a tree?", "options": {"a": "find_size(root_node\u2013>left_node) + 1 + find_size(root_node\u2013>right_node)", "b": "find_size(root_node\u2013>left_node) + find_size(root_node\u2013>right_node)", "c": "find_size(root_node\u2013>right_node) \u2013 1", "d": "find_size(root_node\u2013>left_node + 1"}, "correct": "a"}}}, "47": {"topic_name": "Binary Tree Operations", "mcqs": {"1": {"statement": " What is the maximum number of children that a binary tree node can have?", "options": {"a": "0", "b": "1", "c": "2", "d": "3"}, "correct": "a"}, "2": {"statement": " The following given tree is an example for?\n", "options": {"a": "Binary tree", "b": "Binary search tree", "c": "Fibonacci tree", "d": "AVL tree"}, "correct": "b"}, "4": {"statement": " How many common operations are performed in a binary tree?", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "b"}, "5": {"statement": " What is the traversal strategy used in the binary tree?", "options": {"a": "depth-first traversal", "b": "breadth-first traversal", "c": "random traversal", "d": "Priority traversal"}, "correct": "b"}, "6": {"statement": " How many types of insertion are performed in a binary tree?", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "c"}, "7": {"statement": " What operation does the following diagram depict?\n", "options": {"a": "inserting a leaf node", "b": "inserting an internal node", "c": "deleting a node with 0 or 1 child", "d": "deleting a node with 2 children"}, "correct": "a"}, "9": {"statement": " How many bits would a succinct binary tree occupy?", "options": {"a": "n+O(n)", "b": "2n+O(n)", "c": "n/2", "d": "n"}, "correct": "d"}, "10": {"statement": " The average depth of a binary tree is given as?", "options": {"a": "O(N)", "b": "O(\u221aN)", "c": "O(N2)", "d": "O(log N)"}, "correct": "d"}, "11": {"statement": " How many orders of traversal are applicable to a binary tree (In General)?", "options": {"a": "1", "b": "4", "c": "2", "d": "3"}, "correct": "a"}, "12": {"statement": " If binary trees are represented in arrays, what formula can be used to locate a left child, if the node has an index i?", "options": {"a": "2i+1", "b": "2i+2", "c": "2i", "d": "4i"}, "correct": "b"}, "13": {"statement": " Using what formula can a parent node be located in an array?", "options": {"a": "(i+1)/2", "b": "(i-1)/2", "c": "i/2", "d": "2i/2"}, "correct": "a"}, "14": {"statement": " Which of the following properties are obeyed by all three tree \u2013 traversals?", "options": {"a": "Left subtrees are visited before right subtrees", "b": "Right subtrees are visited before left subtrees", "c": "Root node is visited before left subtree", "d": "Root node is visited before right subtree"}, "correct": "d"}}}, "48": {"topic_name": "Preorder Traversal", "mcqs": {"1": {"statement": " For the tree below, write the pre-order traversal.\n", "options": {"a": "2, 7, 2, 6, 5, 11, 5, 9, 4", "b": "2, 7, 5, 2, 6, 9, 5, 11, 4", "c": "2, 5, 11, 6, 7, 4, 9, 5, 2", "d": "2, 7, 5, 6, 11, 2, 5, 4, 9"}, "correct": "c"}, "2": {"statement": " For the tree below, write the post-order traversal.\n", "options": {"a": "2, 7, 2, 6, 5, 11, 5, 9, 4", "b": "2, 7, 5, 2, 6, 9, 5, 11, 4", "c": "2, 5, 11, 6, 7, 4, 9, 5, 2", "d": "2, 7, 5, 6, 11, 2, 5, 4, 9"}, "correct": "a"}}}, "49": {"topic_name": "Postorder Traversal", "mcqs": {"2": {"statement": " What is the possible number of binary trees that can be created with 3 nodes, giving the sequence N, M, L when traversed in post-order.", "options": {"a": "15", "b": "3", "c": "5", "d": "8"}, "correct": " "}, "3": {"statement": " The post-order traversal of a binary tree is O P Q R S T. Then possible pre-order traversal will be ________", "options": {"a": "T Q R S O P", "b": "T O Q R P S", "c": "T Q O P S R", "d": "T Q O S P R"}, "correct": "d"}, "4": {"statement": " A binary search tree contains values 7, 8, 13, 26, 35, 40, 70, 75. Which one of the following is a valid post-order sequence of the tree provided the pre-order sequence as 35, 13, 7, 8, 26, 70, 40 and 75?", "options": {"a": "7, 8, 26, 13, 75, 40, 70, 35", "b": "26, 13, 7, 8, 70, 75, 40, 35", "c": "7, 8, 13, 26, 35, 40, 70, 75", "d": "8, 7, 26, 13, 40, 75, 70, 35"}, "correct": "b"}, "5": {"statement": " Which of the following pair\u2019s traversals on a binary tree can build the tree uniquely?", "options": {"a": "post-order and pre-order", "b": "post-order and in-order", "c": "post-order and level order", "d": "level order and preorder"}, "correct": "a"}, "6": {"statement": " A full binary tree can be generated using ______", "options": {"a": "post-order and pre-order traversal", "b": "pre-order traversal", "c": "post-order traversal", "d": "in-order traversal"}, "correct": "b"}, "7": {"statement": " The maximum number of nodes in a tree for which post-order and pre-order traversals may be equal is ______", "options": {"a": "3", "b": "1", "c": "2", "d": "any number"}, "correct": "b"}, "9": {"statement": " The pre-order and in-order are traversals of a binary tree are T M L N P O Q and L M N T O P Q. Which of following is post-order traversal of the tree?", "options": {"a": "L N M O Q P T", "b": "N M O P O L T", "c": "L M N O P Q T", "d": "O P L M N Q T"}, "correct": "b"}}}, "50": {"topic_name": "Inorder Traversal", "mcqs": {"1": {"statement": " For the tree below, write the in-order traversal.\n", "options": {"a": "6, 2, 5, 7, 11, 2, 5, 9, 4", "b": "6, 5, 2, 11, 7, 4, 9, 5, 2", "c": "2, 7, 2, 6, 5, 11, 5, 9, 4", "d": "2, 7, 6, 5, 11, 2, 9, 5, 4"}, "correct": "b"}, "2": {"statement": " For the tree below, write the level-order traversal.\n", "options": {"a": "2, 7, 2, 6, 5, 11, 5, 9, 4", "b": "2, 7, 5, 2, 11, 9, 6, 5, 4", "c": "2, 5, 11, 6, 7, 4, 9, 5, 2", "d": "2, 7, 5, 6, 11, 2, 5, 4, 9"}, "correct": "b"}}}, "51": {"topic_name": "Binary Tree Properties", "mcqs": {"1": {"statement": " The number of edges from the root to the node is called __________ of the tree.", "options": {"a": "Height", "b": "Depth", "c": "Length", "d": "Width"}, "correct": "a"}, "2": {"statement": " The number of edges from the node to the deepest leaf is called _________ of the tree.", "options": {"a": "Height", "b": "Depth", "c": "Length", "d": "Width"}, "correct": "a"}, "3": {"statement": " What is a full binary tree?", "options": {"a": "Each node has exactly zero or two children", "b": "Each node has exactly two children", "c": "All the leaves are at the same level", "d": "Each node has exactly one or two children"}, "correct": "c"}, "4": {"statement": " What is a complete binary tree?", "options": {"a": "Each node has exactly zero or two children", "b": "A binary tree, which is completely filled, with the possible exception of the bottom level, which is filled from right to left", "c": "A binary tree, which is completely filled, with the possible exception of the bottom level, which is filled from left to right", "d": "A tree In which all nodes have degree 2"}, "correct": "d"}, "5": {"statement": " What is the average case time complexity for finding the height of the binary tree?", "options": {"a": "h = O(loglogn)", "b": "h = O(nlogn)", "c": "h = O(n)", "d": "h = O(log n)"}, "correct": "d"}, "6": {"statement": " Which of the following is not an advantage of trees?", "options": {"a": "Hierarchical structure", "b": "Faster search", "c": "Router algorithms", "d": "Undo/Redo operations in a notepad"}, "correct": "b"}, "7": {"statement": " In a full binary tree if number of internal nodes is I, then number of leaves L are?", "options": {"a": "L = 2*I", "b": "L = I + 1", "c": "L = I \u2013 1", "d": "L = 2*I \u2013 1"}, "correct": "d"}, "8": {"statement": " In a full binary tree if number of internal nodes is I, then number of nodes N are?", "options": {"a": "N = 2*I", "b": "N = I + 1", "c": "N = I \u2013 1", "d": "N = 2*I + 1"}, "correct": "d"}, "9": {"statement": " In a full binary tree if there are L leaves, then total number of nodes N are?", "options": {"a": "N = 2*L", "b": "N = L + 1", "c": "N = L \u2013 1", "d": "N = 2*L \u2013 1"}, "correct": "d"}, "10": {"statement": " Which of the following is incorrect with respect to binary trees?", "options": {"a": "Let T be a binary tree. For every k \u2265 0, there are no more than 2k nodes in level k", "b": "Let T be a binary tree with \u03bb levels. Then T has no more than 2\u03bb \u2013 1 nodes", "c": "Let T be a binary tree with N nodes. Then the number of levels is at least ceil(log (N + 1))", "d": "Let T be a binary tree with N nodes. Then the number of levels is at least floor(log (N + 1))"}, "correct": "d"}, "11": {"statement": " Construct a binary tree by using postorder and inorder sequences given below.\nInorder: N, M, P, O, Q\nPostorder: N, P, Q, O, M", "options": {"a": "", "b": "", "c": "", "d": ""}, "correct": "b"}, "12": {"statement": " Construct a binary search tree by using postorder sequence given below.\nPostorder: 2, 4, 3, 7, 9, 8, 5.", "options": {"a": "", "b": "", "c": " ", "d": ""}, "correct": "a"}}}, "52": {"topic_name": "Binary Search Tree", "mcqs": {"1": {"statement": " Which of the following is false about a binary search tree?", "options": {"a": "The left child is always lesser than its parent", "b": "The right child is always greater than its parent", "c": "The left and right sub-trees should also be binary search trees", "d": "In order sequence gives decreasing order of elements"}, "correct": "a"}, "6": {"statement": " What is the speciality about the inorder traversal of a binary search tree?", "options": {"a": "It traverses in a non increasing order", "b": "It traverses in an increasing order", "c": "It traverses in a random fashion", "d": "It traverses based on priority of the node"}, "correct": "c"}}}, "53": {"topic_name": "Balanced Binary Tree", "mcqs": {"1": {"statement": " What will be the height of a balanced full binary tree with 8 leaves?", "options": {"a": "8", "b": "5", "c": "6", "d": "4"}, "correct": "c"}, "2": {"statement": " The balance factor of a node in a binary tree is defined as _____", "options": {"a": "addition of heights of left and right subtrees", "b": "height of right subtree minus height of left subtree", "c": "height of left subtree minus height of right subtree", "d": "height of right subtree minus one"}, "correct": "b"}, "3": {"statement": " Figure below is a balanced binary tree. If a node inserted as child of the node R, how many nodes will become unbalanced?\n", "options": {"a": "2", "b": "1", "c": "3", "d": "0"}, "correct": "a"}, "4": {"statement": " A binary tree is balanced if the difference between left and right subtree of every node is not more than ____", "options": {"a": "1", "b": "3", "c": "2", "d": "0"}, "correct": "d"}, "5": {"statement": " Which of the following tree data structures is not a balanced binary tree?", "options": {"a": "AVL tree", "b": "Red-black tree", "c": "Splay tree", "d": "B-tree"}, "correct": "b"}, "6": {"statement": " Which of following figures is a balanced binary tree?", "options": {"a": "", "b": "", "c": "", "d": ""}, "correct": "a"}, "7": {"statement": " Balanced binary tree with n items allows the lookup of an item in ____ worst-case time.", "options": {"a": "O(log n)", "b": "O(nlog 2)", "c": "O(n)", "d": "O(1)"}, "correct": "d"}, "8": {"statement": " Which of the following data structures can be efficiently implemented using height balanced binary search tree?", "options": {"a": "sets", "b": "priority queue", "c": "heap", "d": "both sets and priority queue"}, "correct": "a"}, "9": {"statement": " Two balanced binary trees are given with m and n elements respectively. They can be merged into a balanced binary search tree in ____ time.", "options": {"a": "O(m+n)", "b": "O(mn)", "c": "O(m)", "d": "O(mlog n)"}, "correct": "a"}, "10": {"statement": " Which of the following is an advantage of balanced binary search tree, like AVL tree, compared to binary heap?", "options": {"a": "insertion takes less time", "b": "deletion takes less time", "c": "searching takes less time", "d": "construction of the tree takes less time than binary heap"}, "correct": "a"}}}, "54": {"topic_name": "Self Balancing Binary Search Tree", "mcqs": {"1": {"statement": " Which of the following is not the self balancing binary search tree?", "options": {"a": "AVL Tree", "b": "2-3-4 Tree", "c": "Red \u2013 Black Tree", "d": "Splay Tree"}, "correct": "a"}, "2": {"statement": " The binary tree sort implemented using a self \u2013 balancing binary search tree takes ______ time is worst case.", "options": {"a": "O(n log n)", "b": "O(n)", "c": "O(n2)", "d": "O(log n)"}, "correct": "b"}, "3": {"statement": "  An AVL tree is a self \u2013 balancing binary search tree, in which the heights of the two child sub trees of any node differ by _________", "options": {"a": "At least one", "b": "At most one", "c": "Two", "d": "At most two"}, "correct": "d"}, "4": {"statement": " Associative arrays can be implemented using __________", "options": {"a": "B-tree", "b": "A doubly linked list", "c": "A single linked list", "d": "A self balancing binary search tree"}, "correct": "b"}, "6": {"statement": " Which of the following is a self \u2013 balancing binary search tree?", "options": {"a": "2-3 tree", "b": "Threaded binary tree", "c": "AA tree", "d": "Treap"}, "correct": "a"}, "7": {"statement": " A self \u2013 balancing binary search tree can be used to implement ________", "options": {"a": "Priority queue", "b": "Hash table", "c": "Heap sort", "d": "Priority queue and Heap sort"}, "correct": "c"}, "8": {"statement": " In which of the following self \u2013 balancing binary search tree the recently accessed element can be accessed quickly?", "options": {"a": "AVL tree", "b": "AA tree", "c": "Splay tree", "d": "Red \u2013 Black tree"}, "correct": "a"}, "9": {"statement": " The minimum height of self balancing binary search tree with n nodes is _____", "options": {"a": "log2(n)", "b": "n", "c": "2n + 1", "d": "2n \u2013 1"}, "correct": "a"}}}, "55": {"topic_name": "Randomized Binary Search Tree", "mcqs": {"1": {"statement": " Which of the following is not a random tree?", "options": {"a": "Treap", "b": "Random Binary Tree", "c": "Uniform Spanning Tree", "d": "AVL Tree"}, "correct": "a"}, "2": {"statement": " Which process forms the randomized binary search tree?", "options": {"a": "Stochastic Process", "b": "Branching Process", "c": "Diffusion Process", "d": "Aggregation Process"}, "correct": "d"}, "3": {"statement": " How many randomized binary search trees can be formed by the numbers (1, 3, 2)?", "options": {"a": "2", "b": "3", "c": "6", "d": "5"}, "correct": "d"}, "4": {"statement": " What is the expected depth of a node in a randomized binary search tree?", "options": {"a": "log n", "b": "n!", "c": "n2", "d": "2 log n + O(1)"}, "correct": "d"}, "5": {"statement": " What is the longest length path for a node x in random binary search tree for the insertion process?", "options": {"a": "log x", "b": "x2", "c": "x!", "d": "4.311 log x"}, "correct": "d"}, "6": {"statement": " What is the range of \u03b2 in finding the length of the longest path in a randomized binary search tree?", "options": {"a": "(-1, 0)", "b": "(1, 0)", "c": "(0, 5)", "d": "(0, 1)"}, "correct": "b"}, "7": {"statement": " What is the expected number of leaves in a randomized binary search tree?", "options": {"a": "n + 1", "b": "(n + 1)/3", "c": "(n + 1)/2", "d": "n + 3"}, "correct": "a"}, "9": {"statement": " What is the probability of selecting a tree uniformly at random?", "options": {"a": "Equal to Catalan Number", "b": "Less Than Catalan Number", "c": "Greater than Catalan Number", "d": "Reciprocal of Catalan Number"}, "correct": "a"}}}, "56": {"topic_name": "AA Tree", "mcqs": {"1": {"statement": " AA Trees are implemented using?", "options": {"a": "Colors", "b": "Levels", "c": "Node size", "d": "Heaps"}, "correct": "a"}, "2": {"statement": " Which of the following is the correct definition for a horizontal link?", "options": {"a": "connection between node and a child of equal levels", "b": "connection between two nodes", "c": "connection between two child nodes", "d": "connection between root node and leaf node"}, "correct": "a"}, "3": {"statement": " How will you remove a left horizontal link in an AA-tree?", "options": {"a": "by performing right rotation", "b": "by performing left rotation", "c": "by deleting both the elements", "d": "by inserting a new element"}, "correct": "b"}, "4": {"statement": " What are the two different operations done in an AA-Tree?", "options": {"a": "shift and color", "b": "skew and split", "c": "zig and zag", "d": "enqueue and dequeue"}, "correct": "b"}, "6": {"statement": " How many different shapes does maintenance of AA-Tree need to consider?", "options": {"a": "7", "b": "5", "c": "2", "d": "3"}, "correct": "a"}, "7": {"statement": " What is the prime condition of AA-tree which makes it simpler than a red-black tree?", "options": {"a": "Only right children can be red", "b": "Only left children can be red", "c": "Right children should strictly be black", "d": "There should be no left children"}, "correct": "d"}, "8": {"statement": " Which of the following trees is similar to that of an AA-Tree?", "options": {"a": "Splay Tree", "b": "B+ Tree", "c": "AVL Tree", "d": "Red-Black Tree"}, "correct": "b"}, "9": {"statement": " What is the worst case analysis of an AA-Tree?", "options": {"a": "O(N)", "b": "O(log N)", "c": "O( N log N)", "d": "O(N2)"}, "correct": "a"}, "11": {"statement": " Who is the inventor of AA-Tree?", "options": {"a": "Arne Anderson", "b": "Daniel Sleator", "c": "Rudolf Bayer", "d": "Jon Louis Bentley"}, "correct": "c"}, "12": {"statement": " What should be the condition for the level of a left node?", "options": {"a": "It should be less than or equal to that of its parent", "b": "It should be greater than that of its parent", "c": "It should be strictly less than that of its parent", "d": "The level should be equal to one"}, "correct": "d"}, "13": {"statement": " Of the following rules that are followed by an AA-tree, which of the following is incorrect?\n1- Only right children can be red\n2- Procedures are coded recursively\n3- Instead of storing colors, the level of a node is stored\n4- There should not be any left children", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "b"}, "14": {"statement": " In the given figure, find \u2018?\u2019.\n", "options": {"a": "left rotation", "b": "right rotation", "c": "insertion", "d": "deletion"}, "correct": "a"}}}, "57": {"topic_name": "AVL Tree", "mcqs": {"1": {"statement": " What is an AVL tree?", "options": {"a": "a tree which is balanced and is a height balanced tree", "b": "a tree which is unbalanced and is a height balanced tree", "c": "a tree with three children", "d": "a tree with atmost 3 children"}, "correct": "a"}, "2": {"statement": " Why we need to a binary tree which is height balanced?", "options": {"a": "to avoid formation of skew trees", "b": "to save memory", "c": "to attain faster memory access", "d": "to simplify storing"}, "correct": "b"}, "3": {"statement": " Which of the below diagram is following AVL tree property?\n i.\nii.", "options": {"a": "only i", "b": "only i and ii", "c": "only ii", "d": "i is not a binary search tree"}, "correct": "b"}, "4": {"statement": " What is the maximum height of an AVL tree with p nodes?", "options": {"a": "p", "b": "log(p)", "c": "log(p)/2", "d": "p\u20442"}, "correct": "a"}, "6": {"statement": " Given an empty AVL tree, how would you construct AVL tree when a set of numbers are given without performing any rotations?", "options": {"a": "just build the tree with the given input", "b": "find the median of the set of elements given, make it as root and construct the tree", "c": "use trial and error", "d": "use dynamic programming to build the tree"}, "correct": "a"}, "7": {"statement": " What maximum difference in heights between the leafs of a AVL tree is possible?", "options": {"a": "log(n) where n is the number of nodes", "b": "n where n is the number of nodes", "c": "0 or 1", "d": "atmost 1"}, "correct": "a"}}}, "58": {"topic_name": "Cartesian Tree", "mcqs": {"1": {"statement": " What is a Cartesian tree?", "options": {"a": "a skip list in the form of tree", "b": "a tree which obeys cartesian product", "c": "a tree which obeys heap property and whose inorder traversal yields the given sequence", "d": "a tree which obeys heap property only"}, "correct": "a"}, "3": {"statement": " Which of the below statements are true?\ni. Cartesian tree is not a height balanced tree\nii. Cartesian tree of a sequence of unique numbers can be unique generated", "options": {"a": "both statements are true", "b": "only i. is true", "c": "only ii. is true", "d": "both are false"}, "correct": "a"}, "4": {"statement": " What is the speciality of cartesian sorting?", "options": {"a": "it sorts partially sorted set of data quickly", "b": "it considers cartesian product of elements", "c": "it sorts elements in less than O(logn)", "d": "it is a self balancing tree"}, "correct": "a"}, "5": {"statement": " Consider a sequence of numbers to have repetitions, how a cartesian tree can be constructed in such situations without violating any rules?", "options": {"a": "use any tie-breaking rule between repeated elements", "b": "cartesian tree is impossible when repetitions are present", "c": "construct a max heap in such cases", "d": "construct a min heap in such cases"}, "correct": "b"}, "6": {"statement": " What happens if we apply the below operations on an input sequence?\ni. construct a cartesian tree for input sequence\nii. put the root element of above tree in a priority queue\niii. if( priority queue is not empty) then\niv. search and delete minimum value in priority queue\nv. add that to output\nvi. add cartesian tree children of above node to priority queue", "options": {"a": "constructs a cartesian tree", "b": "sorts the input sequence", "c": "does nothing", "d": "produces some random output"}, "correct": "c"}, "7": {"statement": " Cartesian trees are most suitable for?", "options": {"a": "searching", "b": "finding nth element", "c": "minimum range query and lowest common ancestors", "d": "self balancing a tree"}, "correct": "a"}, "8": {"statement": " A treap is a cartesian tree with ___________", "options": {"a": "additional value, which is a priority value to the key generated randomly", "b": "additional value, which is a priority value to the key generated sequentially", "c": "additional heap rule", "d": "additional operations like remove a range of elements"}, "correct": "a"}}}, "59": {"topic_name": "Weight Balanced Tree", "mcqs": {"1": {"statement": " What is a weight balanced tree?", "options": {"a": "A binary tree that stores the sizes of subtrees in nodes", "b": "A binary tree with an additional attribute of weight", "c": "A height balanced binary tree", "d": "A normal binary tree"}, "correct": "a"}, "2": {"statement": " What are the applications of weight balanced tree?", "options": {"a": "dynamic sets, dictionaries, sequences, maps", "b": "heaps", "c": "sorting", "d": "storing strings"}, "correct": "a"}, "3": {"statement": " A node of the weight balanced tree has", "options": {"a": "key, left and right pointers, size", "b": "key, value", "c": "key, size", "d": "key"}, "correct": "a"}, "5": {"statement": " What is the condition for a tree to be weight balanced. where a is factor and n is a node?", "options": {"a": "weight[n.left] >= a*weight[n] and weight[n.right] >= a*weight[n].", "b": "weight[n.left] >= a*weight[n.right] and weight[n.right] >= a*weight[n].", "c": "weight[n.left] >= a*weight[n.left] and weight[n.right] >= a*weight[n].", "d": "weight[n] is a non zero"}, "correct": "a"}, "6": {"statement": " What are the operations that can be performed on weight balanced tree?", "options": {"a": "all basic operations and set intersection, set union and subset test", "b": "all basic operations", "c": "set intersection, set union and subset test", "d": "only insertion and deletion"}, "correct": "d"}, "7": {"statement": " Consider a weight balanced tree such that, the number of nodes in the left sub tree is at least half and at most twice the number of nodes in the right sub tree. The maximum possible height (number of nodes on the path from the root to the farthest leaf) of such a tree on k nodes can be described as", "options": {"a": "log2 n", "b": "log4/3 n", "c": "log3 n", "d": "log3/2 n"}, "correct": "a"}}}, "60": {"topic_name": "Red Black Tree", "mcqs": {"1": {"statement": " What is the special property of red-black trees and what root should always be?", "options": {"a": "a color which is either red or black and root should always be black color only", "b": "height of the tree", "c": "pointer to next node", "d": "a color which is either green or black"}, "correct": "a"}, "2": {"statement": " Why do we impose restrictions like\n . root property is black\n . every leaf is black\n . children of red node are black\n . all leaves have same black", "options": {"a": "to get logarithm time complexity", "b": "to get linear time complexity", "c": "to get exponential time complexity", "d": "to get constant time complexity"}, "correct": "a"}, "3": {"statement": " Cosider the below formations of red-black tree.\n\n   All the above formations are incorrect for it to be a redblack tree. then what may be the correct order?", "options": {"a": "50-black root, 18-red left subtree, 100-red right subtree", "b": "50-red root, 18-red left subtree, 100-red right subtree", "c": "50-black root, 18-black left subtree, 100-red right subtree", "d": "50-black root, 18-red left subtree, 100-black right subtree"}, "correct": "a"}, "4": {"statement": " What are the operations that could be performed in O(logn) time complexity by red-black tree?", "options": {"a": "insertion, deletion, finding predecessor, successor", "b": "only insertion", "c": "only finding predecessor, successor", "d": "for sorting"}, "correct": "c"}, "5": {"statement": " Which of the following is an application of Red-black trees and why?", "options": {"a": "used to store strings efficiently", "b": "used to store integers efficiently", "c": "can be used in process schedulers, maps, sets", "d": "for efficient sorting"}, "correct": "a"}, "6": {"statement": " When it would be optimal to prefer Red-black trees over AVL trees?", "options": {"a": "when there are more insertions or deletions", "b": "when more search is needed", "c": "when tree must be balanced", "d": "when log(nodes) time complexity is needed"}, "correct": "b"}, "7": {"statement": " Why Red-black trees are preferred over hash tables though hash tables have constant time complexity?", "options": {"a": "no they are not preferred", "b": "because of resizing issues of hash table and better ordering in redblack trees", "c": "because they can be implemented using trees", "d": "because they are balanced"}, "correct": "a"}, "8": {"statement": " How can you save memory when storing color information in Red-Black tree?", "options": {"a": "using least significant bit of one of the pointers in the node for color information", "b": "using another array with colors of each node", "c": "storing color information in the node structure", "d": "using negative and positive numbering"}, "correct": "a"}, "9": {"statement": " When to choose Red-Black tree, AVL tree and B-trees?", "options": {"a": "many inserts, many searches and when managing more items respectively", "b": "many searches, when managing more items respectively and many inserts respectively", "c": "sorting, sorting and retrieval respectively", "d": "retrieval, sorting and retrieval respectively"}, "correct": "a"}}}, "61": {"topic_name": "Top Tree", "mcqs": {"1": {"statement": " Which algorithm is used in the top tree data structure?", "options": {"a": "Divide and Conquer", "b": "Greedy", "c": "Backtracking", "d": "Branch"}, "correct": "d"}, "2": {"statement": " For how many vertices in a set, is top tree defined for underlying tree?", "options": {"a": "3", "b": "4", "c": "5", "d": "2"}, "correct": "a"}, "3": {"statement": " How many edges are present in path cluster?", "options": {"a": "2", "b": "3", "c": "6", "d": "1"}, "correct": "a"}, "4": {"statement": " How many edges does a leaf cluster contain?", "options": {"a": "0", "b": "1", "c": "2", "d": "3"}, "correct": "b"}, "5": {"statement": " How many edges are present in Edge cluster?", "options": {"a": "0", "b": "1", "c": "2", "d": "4"}, "correct": "a"}, "6": {"statement": " Which data structure is used to maintain a dynamic forest using a link or cut operation?", "options": {"a": "Top Tree", "b": "Array", "c": "Linked List", "d": "Stack"}, "correct": "a"}, "9": {"statement": " What is the time complexity for the initialization of top tree?", "options": {"a": "O (n)", "b": "O (n2)", "c": "O (log n)", "d": "O (n!)"}, "correct": "a"}, "10": {"statement": " How many top trees are there in a tree with single vertex?", "options": {"a": "0", "b": "1", "c": "2", "d": "3"}, "correct": "d"}, "11": {"statement": " Which property makes top tree a binary tree?", "options": {"a": "Nodes as Cluster", "b": "Leaves as Edges", "c": "Root is Tree Itself", "d": "All of the mentioned"}, "correct": "d"}, "12": {"statement": " Which of the dynamic operations are used in Top Tree data structure implementation?", "options": {"a": "Link", "b": "Cut", "c": "Expose", "d": "All of the mentioned"}, "correct": "a"}, "13": {"statement": " Which of the following are used as an internal operation in Top tree?", "options": {"a": "Merge", "b": "Cut", "c": "Expose", "d": "Link"}, "correct": "c"}}}, "62": {"topic_name": "Splay Tree", "mcqs": {"1": {"statement": " What are splay trees?", "options": {"a": "self adjusting binary search trees", "b": "self adjusting binary trees", "c": "a tree with strings", "d": "a tree with probability distributions"}, "correct": "b"}, "2": {"statement": " Which of the following property of splay tree is correct?", "options": {"a": "it holds probability usage of the respective sub trees", "b": "any sequence of j operations starting from an empty tree with h nodes atmost, takes O(jlogh) time complexity", "c": "sequence of operations with h nodes can take O(logh) time complexity", "d": "splay trees are unstable trees"}, "correct": "c"}, "3": {"statement": " Why to prefer splay trees?", "options": {"a": "easier to program", "b": "space efficiency", "c": "easier to program and faster access to recently accessed items", "d": "quick searching"}, "correct": "a"}, "5": {"statement": " What is a splay operation?", "options": {"a": "moving parent node to down of child", "b": "moving a node to root", "c": "moving root to leaf", "d": "removing leaf node"}, "correct": "a"}, "6": {"statement": " Which of the following options is an application of splay trees?", "options": {"a": "cache Implementation", "b": "networks", "c": "send values", "d": "receive values"}, "correct": "b"}, "7": {"statement": " When we have red-black trees and AVL trees that can perform most of operations in logarithmic times, then what is the need for splay trees?", "options": {"a": "no there is no special usage", "b": "In real time it is estimated that 80% access is only to 20% data, hence most used ones must be easily available", "c": "redblack and avl are not upto mark", "d": "they are just another type of self balancing binary search trees"}, "correct": "a"}}}, "63": {"topic_name": "Treap", "mcqs": {"1": {"statement": " What is the space complexity of a treap algorithm?", "options": {"a": "O(N)", "b": "O(log N)", "c": "O(log N)", "d": "O(N2)"}, "correct": "b"}, "3": {"statement": " Which is the simplest of all binary search trees?", "options": {"a": "AVL tree", "b": "Treap", "c": "Splay tree", "d": "Binary heap"}, "correct": "d"}, "4": {"statement": " What is the reason behind the simplicity of a treap?", "options": {"a": "Each node has data and a pointer", "b": "Each node is colored accordingly", "c": "It is a binary search tree following heap principles", "d": "Each node has a fixed priority field"}, "correct": "b"}, "5": {"statement": " What is the condition for priority of a node in a treap?", "options": {"a": "a node\u2019s priority should be greater than its parent", "b": "a node\u2019s priority should be at least as large as its parent", "c": "the priority is randomly assigned and can have any value", "d": "a node\u2019s priority is always given in decreasing order"}, "correct": "a"}, "7": {"statement": " What is the average running time of a treap?", "options": {"a": "O(N)", "b": "O(N log N)", "c": "O(log N)", "d": "O(M log N)"}, "correct": "a"}, "8": {"statement": " Which node has the lowest priority in a treap?", "options": {"a": "root node", "b": "leaf node", "c": "null node", "d": "centre node"}, "correct": "d"}, "9": {"statement": " What is the priority of a null node?", "options": {"a": "1", "b": "0", "c": "random number", "d": "infinity"}, "correct": "a"}}}, "64": {"topic_name": "Threaded Binary Tree", "mcqs": {"1": {"statement": " What is a threaded binary tree traversal?", "options": {"a": "a binary tree traversal using stacks", "b": "a binary tree traversal using queues", "c": "a binary tree traversal using stacks and queues", "d": "a binary tree traversal without using stacks and queues"}, "correct": "a"}, "2": {"statement": " What are the disadvantages of normal binary tree traversals?", "options": {"a": "there are many pointers which are null and thus useless", "b": "there is no traversal which is efficient", "c": "complexity in implementing", "d": "improper traversals"}, "correct": "a"}, "3": {"statement": " In general, the node content in a threaded binary tree is ________", "options": {"a": "leftchild_pointer, left_tag, data, right_tag, rightchild_pointer", "b": "leftchild_pointer, left_tag", "c": "leftchild_pointer, left_tag, right_tag, rightchild_pointer", "d": "leftchild_pointer, left_tag, data"}, "correct": "a"}, "4": {"statement": " What are null nodes filled with in a threaded binary tree?", "options": {"a": "inorder predecessor for left node and inorder successor for right node information", "b": "right node with inorder predecessor and left node with inorder successor information", "c": "they remain null", "d": "some other values randomly"}, "correct": "a"}, "5": {"statement": " Which of the following tree traversals work if the null left pointer pointing to the predecessor and null right pointer pointing to the successor in a binary tree?", "options": {"a": "inorder, postorder, preorder traversals", "b": "inorder", "c": "postorder", "d": "preorder"}, "correct": "a"}, "6": {"statement": " What are double and single threaded trees?", "options": {"a": "when both left, right nodes are having null pointers and only right node is null pointer respectively", "b": "having 2 and 1 node", "c": "using single and double linked lists", "d": "using heaps and priority queues"}, "correct": "a"}}}, "65": {"topic_name": "Tango Tree", "mcqs": {"1": {"statement": " Who developed the concept of tango tree?", "options": {"a": "Erik Demaine", "b": "Mihai Patrascu", "c": "John Lacono", "d": "All of the mentioned"}, "correct": "c"}, "2": {"statement": " Which type of tree is tango tree?", "options": {"a": "Ternary Tree", "b": "AVL Tree", "c": "Binary Search Tree", "d": "K-ary Tree"}, "correct": "b"}, "3": {"statement": " After which city is tango tree named?", "options": {"a": "Vatican City", "b": "Buenos Aires", "c": "New York", "d": "California"}, "correct": "d"}, "4": {"statement": " Which type of binary search tree or algorithm does tango tree use?", "options": {"a": "Online", "b": "Offline", "c": "Static", "d": "Dynamic"}, "correct": "d"}, "5": {"statement": " What is the time complexity of for achieving competitive ratio by tango tree?", "options": {"a": "O (log n)", "b": "O (n2)", "c": "O (n!)", "d": "O (log (log n))"}, "correct": "a"}, "6": {"statement": " Which type of binary search tree is imitated for construction of tango tree?", "options": {"a": "Complete Binary Search Tree", "b": "Perfect Binary Search Tree", "c": "Balanced Binary Search Tree", "d": "Degenerate Binary Search Tree"}, "correct": "a"}, "7": {"statement": " Which special balanced binary search tree is used to store the nodes of auxiliary tree?", "options": {"a": "Red \u2013 Black Tree", "b": "Red \u2013 Brown Tree", "c": "Red \u2013 Yellow Tree", "d": "Red \u2013 Tango Tree"}, "correct": "a"}, "9": {"statement": " Which operation is used to combine two auxiliary trees?", "options": {"a": "Join", "b": "Combinatorial", "c": "Add", "d": "Concatenation"}, "correct": "a"}, "11": {"statement": " Which operation is used to break a preferred path into two sets of parts at a particular node?", "options": {"a": "Differentiate", "b": "Cut", "c": "Integrate", "d": "Join"}, "correct": "d"}, "12": {"statement": " What is the upper bound for a tango tree if k is a number of interleaves?", "options": {"a": "k+2 O (log (log n))", "b": "k O (log n)", "c": "K2 O (log n)", "d": "k+1 O (log (log n))"}, "correct": "d"}, "13": {"statement": " What is the time complexity for searching k+1 auxiliary trees?", "options": {"a": "k+2 O (log (log n))", "b": "k+1 O (log n)", "c": "K+2 O (log n)", "d": "k+1 O (log (log n))"}, "correct": "d"}, "14": {"statement": " What is the time complexity for the update cost on auxiliary trees?", "options": {"a": "O (log (log n))", "b": "k-1 O (log n)", "c": "K2 O (log n)", "d": "k+1 O (log (log n))"}, "correct": "b"}}}, "66": {"topic_name": "Rope", "mcqs": {"1": {"statement": " Which of the following is also known as Rope data structure?", "options": {"a": "Cord", "b": "String", "c": "Array", "d": "Linked List"}, "correct": "d"}, "2": {"statement": " Which type of data structure does rope represent?", "options": {"a": "Array", "b": "Linked List", "c": "Queue", "d": "Binary Tree"}, "correct": "a"}, "3": {"statement": " What is the time complexity for finding the node at x position where n is the length of the rope?", "options": {"a": "O (log n)", "b": "O (n!)", "c": "O (n2)", "d": "O (1)"}, "correct": "d"}, "4": {"statement": " What is the time complexity for creating a new node and then performing concatenation in the rope data structure?", "options": {"a": "O (log n)", "b": "O (n!)", "c": "O (n2)", "d": "O (1)"}, "correct": "c"}, "5": {"statement": " What is the time complexity for splitting the string into two new string in the rope data structure?", "options": {"a": "O (n2)", "b": "O (n!)", "c": "O (log n)", "d": "O (1)"}, "correct": "b"}, "6": {"statement": " Which type of binary tree does rope require to perform basic operations?", "options": {"a": "Unbalanced", "b": "Balanced", "c": "Complete", "d": "Full"}, "correct": "a"}, "7": {"statement": " What is the time complexity for inserting the string and forming a new string in the rope data structure?", "options": {"a": "O (log n)", "b": "O (n!)", "c": "O (n2)", "d": "O (1)"}, "correct": "a"}, "9": {"statement": " What is the time complexity for deleting the string to form a new string in the rope data structure?", "options": {"a": "O (n2)", "b": "O (n!)", "c": "O (log n)", "d": "O (1)"}, "correct": "a"}}}, "67": {"topic_name": "B-Tree", "mcqs": {"1": {"statement": " Which of the following is the most widely used external memory data structure?", "options": {"a": "AVL tree", "b": "B-tree", "c": "Red-black tree", "d": "Both AVL tree and Red-black tree"}, "correct": "d"}, "2": {"statement": " B-tree of order n is a order-n multiway tree in which each non-root node contains __________", "options": {"a": "at most (n \u2013 1)/2 keys", "b": "exact (n \u2013 1)/2 keys", "c": "at least 2n keys", "d": "at least (n \u2013 1)/2 keys"}, "correct": "a"}, "3": {"statement": " A B-tree of order 4 and of height 3 will have a maximum of _______ keys.", "options": {"a": "255", "b": "63", "c": "127", "d": "188"}, "correct": "c"}, "4": {"statement": " Five node splitting operations occurred when an entry is inserted into a B-tree. Then how many nodes are written?", "options": {"a": "14", "b": "7", "c": "11", "d": "5"}, "correct": "a"}, "6": {"statement": " 2-3-4 trees are B-trees of order 4. They are an isometric of _____ trees.", "options": {"a": "AVL", "b": "AA", "c": "2-3", "d": "Red-Black"}, "correct": "c"}, "7": {"statement": " Figure shown below is B-tree of order 5. What is the result of deleting 130 from the tree?\n", "options": {"a": "", "b": "", "c": "", "d": ""}, "correct": "a"}, "8": {"statement": " What is the best case height of a B-tree of order n and which has k keys?", "options": {"a": "logn (k+1) \u2013 1", "b": "nk", "c": "logk (n+1) \u2013 1", "d": "klogn"}, "correct": "a"}}}, "68": {"topic_name": "B+ Tree", "mcqs": {"2": {"statement": " Which of the following is true?", "options": {"a": "B + tree allows only the rapid random access", "b": "B + tree allows only the rapid sequential access", "c": "B + tree allows rapid random access as well as rapid sequential access", "d": "B + tree allows rapid random access and slower sequential access"}, "correct": "b"}, "3": {"statement": " A B+ tree can contain a maximum of 7 pointers in a node. What is the minimum number of keys in leaves?", "options": {"a": "6", "b": "3", "c": "4", "d": "7"}, "correct": "a"}, "4": {"statement": " Which of the following is false?", "options": {"a": "A B+ -tree grows downwards", "b": "A B+ -tree is balanced", "c": "In a B+ -tree, the sibling pointers allow sequential searching", "d": "B+ -tree is shallower than B-tree"}, "correct": "b"}, "5": {"statement": " A B+ -tree of order 3 is generated by inserting 89, 9 and 8. The generated B+ -tree is __________", "options": {"a": "", "b": "", "c": "", "d": ""}, "correct": "a"}, "6": {"statement": " Statement 1: When a node is split during insertion, the middle key is promoted to the parent as well as retained in right half-node.\nStatement 2: When a key is deleted from the leaf, it is also deleted from the non-leaf nodes of the tree.", "options": {"a": "Statement 1 is true but statement 2 is false", "b": "Statement 2 is true but statement 1 is false", "c": "Both the statements are true", "d": "Both the statements are false"}, "correct": "d"}, "7": {"statement": " Efficiency of finding the next record in B+ tree is ____", "options": {"a": "O(n)", "b": "O(log n)", "c": "O(nlog n)", "d": "O(1)"}, "correct": "d"}, "8": {"statement": " What is the maximum number of keys that a B+ -tree of order 3 and of height 3 have?", "options": {"a": "3", "b": "80", "c": "27", "d": "26"}, "correct": "c"}, "9": {"statement": " Which of the following is false?", "options": {"a": "Compared to B-tree, B+ -tree has larger fanout", "b": "Deletion in B-tree is more complicated than in B+ -tree", "c": "B+ -tree has greater depth than corresponding B-tree", "d": "Both B-tree and B+ -tree have same search and insertion efficiencies"}, "correct": "c"}}}, "69": {"topic_name": "2-3 Tree", "mcqs": {"1": {"statement": " 2-3 tree is a specific form of _________", "options": {"a": "B \u2013 tree", "b": "B+ \u2013 tree", "c": "AVL tree", "d": "Heap"}, "correct": "c"}, "2": {"statement": " Which of the following is the 2-3 tree?", "options": {"a": "", "b": "", "c": "", "d": ""}, "correct": "d"}, "3": {"statement": " The height of 2-3 tree with n elements is ______", "options": {"a": "between (n/2) and (n/3)", "b": "(n/6)", "c": "between (n) and log2(n + 1)", "d": "between log3(n + 1) and log2(n + 1)"}, "correct": "b"}, "4": {"statement": " Which of the following the BST is isometric with the 2-3 tree?", "options": {"a": "Splay tree", "b": "AA tree", "c": "Heap", "d": "Red \u2013 Black tree"}, "correct": "c"}, "5": {"statement": " The figure shown below is a 2-3 tree. What is the result of deleting 110 from the tree?\n", "options": {"a": "", "b": "", "c": "", "d": ""}, "correct": "d"}, "6": {"statement": " Which of the following data structure can provide efficient searching of the elements?", "options": {"a": "unordered lists", "b": "binary search tree", "c": "treap", "d": "2-3 tree"}, "correct": "a"}, "8": {"statement": " Which of the following is not true about the 2-3 tree?", "options": {"a": "all leaves are at the same level", "b": "it is perfectly balanced", "c": "postorder traversal yields elements in sorted order", "d": "it is B-tree of order 3"}, "correct": "b"}}}, "70": {"topic_name": "Ternary Tree \u2013 1", "mcqs": {"1": {"statement": " How many child nodes does each node of Ternary Tree contain?", "options": {"a": "4", "b": "6", "c": "5", "d": "3"}, "correct": "d"}, "2": {"statement": " Which of the following is the name of the node having child nodes?", "options": {"a": "Brother", "b": "Sister", "c": "Mother", "d": "Parent"}, "correct": "c"}, "3": {"statement": " What is the depth of the root node of the ternary tree?", "options": {"a": "2", "b": "1", "c": "0", "d": "3"}, "correct": "d"}, "4": {"statement": " What is the Height of the root node of ternary tree?", "options": {"a": "1", "b": "2", "c": "3", "d": "0"}, "correct": "a"}, "5": {"statement": " Which node is the root node of the following ternary tree?\n", "options": {"a": "A", "b": "B", "c": "C", "d": "D"}, "correct": "d"}, "6": {"statement": " Which node is the Leaf node in the following ternary tree?\n", "options": {"a": "A", "b": "B", "c": "D", "d": "G"}, "correct": "c"}, "7": {"statement": " Which node is the parent node of Node 6?\n", "options": {"a": "1", "b": "5", "c": "2", "d": "3"}, "correct": "a"}, "9": {"statement": " Which node is the child node of Node D in the following ternary tree?\n", "options": {"a": "A", "b": "C", "c": "G", "d": "H"}, "correct": "d"}, "10": {"statement": " Which node is the child node of the Node D in the following ternary tree?\n", "options": {"a": "A", "b": "C", "c": "B", "d": "No child node"}, "correct": "c"}, "11": {"statement": " What is the depth of Node G in the given ternary tree?\n", "options": {"a": "0", "b": "1", "c": "2", "d": "3"}, "correct": "c"}, "12": {"statement": " What is the Height of the given ternary tree?\n", "options": {"a": "0", "b": "1", "c": "2", "d": "3"}, "correct": "d"}}}, "71": {"topic_name": "Ternary Tree \u2013 2", "mcqs": {"1": {"statement": " How many extra nodes are there in Full ternary tree than a complete ternary tree?", "options": {"a": "1", "b": "2", "c": "3", "d": "Both have same number of nodes"}, "correct": "b"}, "3": {"statement": " What is the size of the given ternary tree?\n", "options": {"a": "3", "b": "2", "c": "6", "d": "4"}, "correct": "a"}, "4": {"statement": " Who is the ancestor of Node G?\n", "options": {"a": "C", "b": "F", "c": "H", "d": "A"}, "correct": "d"}, "5": {"statement": " Who is descendant of Node B?\n", "options": {"a": "A", "b": "E", "c": "F", "d": "Both E and F"}, "correct": "d"}, "6": {"statement": " What is the size of Node A?\n", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "a"}}}, "72": {"topic_name": "K-ary Tree \u2013 1", "mcqs": {"1": {"statement": " How many child nodes does each node of K-ary Tree contain?", "options": {"a": "2", "b": "3", "c": "more than k", "d": "at most k"}, "correct": "d"}, "2": {"statement": " Which of the following is the name of the node having child nodes?", "options": {"a": "Brother", "b": "Sister", "c": "Mother", "d": "Parent"}, "correct": "c"}, "3": {"statement": " What is the depth of the root node of K-ary tree?", "options": {"a": "2", "b": "1", "c": "0", "d": "3"}, "correct": "d"}, "4": {"statement": " What is the Height of the root node of K-ary tree?", "options": {"a": "1", "b": "2", "c": "3", "d": "0"}, "correct": "a"}, "5": {"statement": " Which node is the root node of the following K-ary tree?\n", "options": {"a": "A", "b": "B", "c": "C", "d": "D"}, "correct": "d"}, "6": {"statement": " Which node is the Leaf node in the following K-ary tree?\n", "options": {"a": "A", "b": "B", "c": "D", "d": "F"}, "correct": "c"}, "7": {"statement": " Which node is the parent node of Node 5?\n", "options": {"a": "1", "b": "5", "c": "2", "d": "3"}, "correct": "a"}, "9": {"statement": " Which node is the child node of Node C in the following K-ary tree?\n", "options": {"a": "A", "b": "C", "c": "G", "d": "H"}, "correct": "d"}, "10": {"statement": " Which node is the child node of the Node B in the following K-ary tree?\n", "options": {"a": "A", "b": "C", "c": "B", "d": "No child node"}, "correct": "c"}, "11": {"statement": " What is the depth of Node F in the given K-ary tree?\n", "options": {"a": "0", "b": "1", "c": "2", "d": "3"}, "correct": "c"}}}, "73": {"topic_name": "K-ary Tree \u2013 2", "mcqs": {"1": {"statement": " What is the size of the given K-ary tree?\n", "options": {"a": "3", "b": "2", "c": "6", "d": "4"}, "correct": "a"}, "2": {"statement": " Who is the ancestor of Node H?\n", "options": {"a": "D", "b": "F", "c": "H", "d": "A"}, "correct": "d"}, "3": {"statement": " Who is descendant of Node C?\n", "options": {"a": "A", "b": "E", "c": "D", "d": "G"}, "correct": "a"}, "4": {"statement": " What is the size of Node B in given K-ary tree?\n", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "a"}, "7": {"statement": " What is the upper bound for maximum leaves in K-ary tree with height h?", "options": {"a": "K*h", "b": "K^h", "c": "K+h", "d": "K-h"}, "correct": "b"}, "8": {"statement": " What is the height of a K-ary tree having only root node?", "options": {"a": "1", "b": "0", "c": "2", "d": "3"}, "correct": "a"}, "9": {"statement": " Which one of the following is the correct formulae to find the parent node at index I?", "options": {"a": "(I-1)/K", "b": "(I+1)/K", "c": "(I*1)/K", "d": "(I-2)/K"}, "correct": "d"}, "10": {"statement": " Which nodes are the siblings of Node D of given ternary tree?\n", "options": {"a": "E", "b": "C", "c": "F", "d": "H"}, "correct": "d"}, "11": {"statement": " How many extra nodes are there in Full K-ary tree than complete K-ary tree?", "options": {"a": "1", "b": "2", "c": "3", "d": "Both have same number of nodes"}, "correct": "b"}}}, "74": {"topic_name": "Van Emde Boas Tree", "mcqs": {"1": {"statement": " What is the other name or Van Emde Boas Tree data structure?", "options": {"a": "Van Emde Boas Array", "b": "Van Emde Boas Stack", "c": "Van Emde Boas Priority Queue", "d": "Van Emde Boas Heap"}, "correct": "d"}, "2": {"statement": " Who Invented The vEB also known as Van Emde Boas Tree?", "options": {"a": "Peter Van Emde Boas", "b": "Samuel F. B. Morse", "c": "Friedrich Clemens Gerke", "d": "Alexander Morse"}, "correct": "c"}, "3": {"statement": " What is the time complexity for storing the maximum number of elements in Van Emde Boas tree if M is the maximum number of elements?", "options": {"a": "O (log M)", "b": "O (M!)", "c": "O (M)", "d": "O (1)"}, "correct": "a"}, "5": {"statement": " What is the time complexity for searching a key or integer in Van Emde Boas data structure?", "options": {"a": "O (log M!)", "b": "O (M!)", "c": "O (M2)", "d": "O (log (log M))"}, "correct": "d"}, "6": {"statement": " Which type of tree does Van Emde Boas require to perform basic operations?", "options": {"a": "Unbalanced", "b": "Balanced", "c": "Complete", "d": "Non \u2013 Binary"}, "correct": "a"}, "7": {"statement": " What is the time complexity for inserting a key or integer in Van Emde Boas data structure?", "options": {"a": "O (log M!)", "b": "O (M!)", "c": "O (M2)", "d": "O (log (log M))"}, "correct": "d"}, "8": {"statement": " In which year was Van Emde Boas tree invented?", "options": {"a": "1972", "b": "1973", "c": "1974", "d": "1975"}, "correct": "b"}, "9": {"statement": " What is the time complexity for deleting a key or integer in Van Emde Boas data structure?", "options": {"a": "O (log M!)", "b": "O (log (log M))", "c": "O (M!)", "d": "O (M2)"}, "correct": "a"}, "11": {"statement": " What is the time complexity for finding a maximum and minimum integer in Van Emde Boas data structure?", "options": {"a": "O (log M!)", "b": "O (M!)", "c": "O (1)", "d": "O (log (log M))"}, "correct": "d"}, "12": {"statement": " On which abstract data type does van Emde Boas tree performs the operation?", "options": {"a": "Tree", "b": "Linked List", "c": "Heap", "d": "Associative Array"}, "correct": "b"}}}, "75": {"topic_name": "Disjoint-Set Data Structure", "mcqs": {"1": {"statement": " How many properties will an equivalent relationship satisfy?", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "b"}, "2": {"statement": " A relation R on a set S, defined as x R y if and only if y R x. This is an example of?", "options": {"a": "reflexive relation", "b": "symmetric relation", "c": "transitive relation", "d": "invalid relation"}, "correct": "a"}, "4": {"statement": " What is the worst case efficiency for a path compression algorithm?", "options": {"a": "O(N)", "b": "O(log N)", "c": "O(N log N)", "d": "O(M log N)"}, "correct": "c"}, "5": {"statement": " Path Compression algorithm performs in which of the following operations?", "options": {"a": "Create operation", "b": "Insert operation", "c": "Find operation", "d": "Delete operation"}, "correct": "a"}, "6": {"statement": " What is the definition for Ackermann\u2019s function?", "options": {"a": "A(1,i) = i+1 for i>=1", "b": "A(i,j) = i+j for i>=j", "c": "A(i,j) = i+j for i = j", "d": "A(1,i) = i+1 for i<1"}, "correct": "d"}, "7": {"statement": " ___________ is one of the earliest forms of a self-adjustment strategy used in splay trees, skew heaps.", "options": {"a": "Union by rank", "b": "Equivalence function", "c": "Dynamic function", "d": "Path compression"}, "correct": "b"}, "8": {"statement": " What is the depth of any tree if the union operation is performed by height?", "options": {"a": "O(N)", "b": "O(log N)", "c": "O(N log N)", "d": "O(M log N)"}, "correct": "a"}, "10": {"statement": " What is the value for the number of nodes of rank r?", "options": {"a": "N", "b": "N/2", "c": "N/2r", "d": "Nr"}, "correct": "d"}, "11": {"statement": " What is the worst-case running time of unions done by size and path compression?", "options": {"a": "O(N)", "b": "O(logN)", "c": "O(N logN)", "d": "O(M logN)"}, "correct": "a"}, "12": {"statement": " In the Union/Find algorithm, the ranks of the nodes on a path will increase monotonically from?", "options": {"a": "leaf to root", "b": "root to node", "c": "root to leaf", "d": "left subtree to right subtree"}, "correct": "b"}, "13": {"statement": " How many strategies are followed to solve a dynamic equivalence problem?", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "c"}, "14": {"statement": " What is the total time spent for N-1 merges in a dynamic equivalence problem?", "options": {"a": "O(N)", "b": "O(log N)", "c": "O(N log N)", "d": "O(M log N)"}, "correct": "b"}}}, "76": {"topic_name": "Bin", "mcqs": {"1": {"statement": " What is the use of the bin data structure?", "options": {"a": "to have efficient insertion", "b": "to have efficient deletion", "c": "to have efficient region query", "d": "to have efficient traversal"}, "correct": "a"}, "3": {"statement": " What is the worst case time complexity of query operation(n is the no. of candidates)?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(log n)", "d": "O(n log n)"}, "correct": "b"}, "4": {"statement": " What is the worst case time complexity of delete operation(n is the no. of candidates)?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(log n)", "d": "O(n log n)"}, "correct": "a"}, "5": {"statement": " What is the worst case time complexity of insertion operation(n =no. of candidates)?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(log n)", "d": "O(n log n)"}, "correct": "d"}, "6": {"statement": " What is computational geometry?", "options": {"a": "study of geometry using a computer", "b": "study of geometry", "c": "study of algorithms", "d": "study of algorithms related to geometry"}, "correct": "b"}, "7": {"statement": " What will be the time complexity of query operation if all the candidates are evenly spaced so that each bin has constant no. of candidates? (k = number of bins query rectangle intersects)", "options": {"a": "O(1)", "b": "O(k)", "c": "O(k2)", "d": "O(log k)"}, "correct": "b"}, "8": {"statement": " What will be the time complexity of delete operation if all the candidates are evenly spaced so that each bin has constant no. of candidates? (m = number of bins intersecting candidate intersects)", "options": {"a": "O(1)", "b": "O(m)", "c": "O(m2)", "d": "O(log m)"}, "correct": "b"}, "9": {"statement": " What will be the time complexity of insertion operation if all the candidates are evenly spaced so that each bin has constant no. of candidates? (m = number of bins intersecting candidate intersects)", "options": {"a": "O(1)", "b": "O(m)", "c": "O(m2)", "d": "O(log m)"}, "correct": "c"}, "10": {"statement": " Efficiency of bin depends upon ___________", "options": {"a": "size of query and candidates", "b": "location of query and candidates", "c": "location and size of query and candidates", "d": "depends on the input"}, "correct": "b"}}}, "77": {"topic_name": "KD Tree", "mcqs": {"1": {"statement": " In what time can a 2-d tree be constructed?", "options": {"a": "O(N)", "b": "O(N log N)", "c": "O(N2)", "d": "O(M log N)"}, "correct": "a"}, "3": {"statement": " In a two-dimensional search tree, the root is arbitrarily chosen to be?", "options": {"a": "even", "b": "odd", "c": "depends on subtrees", "d": "1"}, "correct": "d"}, "4": {"statement": " Which of the following is the simplest data structure that supports range searching?", "options": {"a": "Heaps", "b": "binary search trees", "c": "AA-trees", "d": "K-d trees"}, "correct": "a"}, "5": {"statement": " In a k-d tree, k originally meant?", "options": {"a": "number of dimensions", "b": "size of tree", "c": "length of node", "d": "weight of node"}, "correct": "c"}, "6": {"statement": " What will be the correct sequence of insertion for the following k-d tree?\n", "options": {"a": "(30,40),(5,25),(70,70),(10,12),(50,30),(35,45)", "b": "(40,30),(5,25),(12,10),(70,70),(30,50),(45,35)", "c": "(30,40),(5,25),(10,12),(70,70),(50,30),(35,45)", "d": "(40,30),(25,5),(12,10),(70,70),(50,30),(45,35)"}, "correct": "b"}, "7": {"statement": " Each level in a k-d tree is made of?", "options": {"a": "dimension only", "b": "cutting and dimension", "c": "color code of node", "d": "size of the level"}, "correct": "a"}, "8": {"statement": " What is the worst case of finding the nearest neighbour?", "options": {"a": "O(N)", "b": "O(N log N)", "c": "O( log N)", "d": "O(N3)"}, "correct": "c"}, "9": {"statement": " What is the run time of finding the nearest neighbour in a k-d tree?", "options": {"a": "O(2+ log N)", "b": "O( log N)", "c": "O(2d log N)", "d": "O( N log N)"}, "correct": "c"}, "10": {"statement": " How many prime concepts are available in nearest neighbour search in a kd tree?", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "a"}, "11": {"statement": " Reducing search space by eliminating irrelevant trees is known as?", "options": {"a": "pruning", "b": "partial results", "c": "freeing space", "d": "traversing"}, "correct": "b"}, "12": {"statement": " Several kinds of queries are possible on a k-d called as?", "options": {"a": "partial queries", "b": "range queries", "c": "neighbour queries", "d": "search queries"}, "correct": "c"}, "13": {"statement": " What is the time taken for a range query for a perfectly balanced tree?", "options": {"a": "O(N)", "b": "O(log N)", "c": "O(\u221aN+M)", "d": "O(\u221aN)"}, "correct": "a"}}}, "78": {"topic_name": "Expression Tree", "mcqs": {"1": {"statement": " The leaves of an expression tree always contain?", "options": {"a": "operators", "b": "operands", "c": "null", "d": "expression"}, "correct": "a"}, "3": {"statement": " What does the other nodes of an expression tree(except leaves) contain?", "options": {"a": "only operands", "b": "only operators", "c": "both operands and operators", "d": "expression"}, "correct": "c"}, "4": {"statement": " An expression tree is a kind of?", "options": {"a": "Binary search tree", "b": "Fibonacci tree", "c": "Binary tree", "d": "Treap"}, "correct": "b"}, "5": {"statement": " The expression obtained by recursively producing a left expression, followed by an operator, followed by recursively producing a right expression is called?", "options": {"a": "prefix expression", "b": "infix expression", "c": "postfix expression", "d": "paranthesized expression"}, "correct": "d"}, "6": {"statement": " The average depth of a binary tree is given as?", "options": {"a": "O(N)", "b": "O(log N)", "c": "O(M log N)", "d": "O(\u221aN)"}, "correct": "b"}, "8": {"statement": " An expression tree is created using?", "options": {"a": "postfix expression", "b": "prefix expression", "c": "infix expression", "d": "paranthesized expression"}, "correct": "c"}, "9": {"statement": " ++a*bc*+defg is an?", "options": {"a": "postfix expression", "b": "infix expression", "c": "prefix expression", "d": "invalid expression"}, "correct": "d"}, "10": {"statement": " An expression tree\u2019s nodes can be deleted by calling?", "options": {"a": "malloc", "b": "calloc", "c": "delete", "d": "free"}, "correct": "b"}, "11": {"statement": " What is the postfix expression for the following expression tree?\n", "options": {"a": "abcde++**", "b": "ab+cde+**", "c": "abc+de+**", "d": "abcd+*e+*"}, "correct": "a"}}}, "79": {"topic_name": "Heap", "mcqs": {"1": {"statement": " In a max-heap, element with the greatest key is always in the which node?", "options": {"a": "Leaf node", "b": "First node of left sub tree", "c": "root node", "d": "First node of right sub tree"}, "correct": "a"}, "3": {"statement": " What is the complexity of adding an element to the heap.", "options": {"a": "O(log n)", "b": "O(h)", "c": "O(log n) & O(h)", "d": "O(n)"}, "correct": "a"}, "4": {"statement": " The worst case complexity of deleting any arbitrary node value element from heap is __________", "options": {"a": "O(logn)", "b": "O(n)", "c": "O(nlogn)", "d": "O(n2)"}, "correct": "a"}, "5": {"statement": " Heap can be used as ________________", "options": {"a": "Priority queue", "b": "Stack", "c": "A decreasing order array", "d": "Normal Array"}, "correct": "a"}, "6": {"statement": " If we implement heap as min-heap, deleting root node (value 1)from the heap. What would be the value of root node after second iteration if leaf node (value 100)  is chosen to replace the root at start.\n", "options": {"a": "2", "b": "100", "c": "17", "d": "3"}, "correct": " "}, "7": {"statement": " If we implement heap as maximum heap , adding a new node of value 15 to the  left most node of right subtree. What value will be at  leaf nodes of the right subtree of the heap.\n", "options": {"a": "15 and 1", "b": "25 and 1", "c": "3 and 1", "d": "2 and 3"}, "correct": "b"}}}, "80": {"topic_name": "Binary Heap", "mcqs": {"1": {"statement": " What is the space complexity of searching in a heap?", "options": {"a": "O(logn)", "b": "O(n)", "c": "O(1)", "d": "O(nlogn)"}, "correct": "d"}, "2": {"statement": " What is the best case complexity in building a heap?", "options": {"a": "O(nlogn)", "b": "O(n2)", "c": "O(n*longn *logn)", "d": "O(n)"}, "correct": "a"}, "5": {"statement": " What is the location of a parent node for any arbitary node i?", "options": {"a": "(i/2) position", "b": "(i+1)/ position", "c": "floor(i/2) position", "d": "ceil(i/2) position"}, "correct": "a"}}}, "81": {"topic_name": "Weak Heap", "mcqs": {"1": {"statement": " Choose the correct properties of weak-heap.", "options": {"a": "Every node has value greater than the value of child node", "b": "Every right child of node has greater value than parent node", "c": "Every left child of node has greater value than parent node", "d": "Every left and right child of node has same value as parent node"}, "correct": "b"}, "3": {"statement": " What is the other name of weak heap?", "options": {"a": "Min-heap", "b": "Max-heap", "c": "Relaxed -heap", "d": "Leonardo heap"}, "correct": "d"}, "4": {"statement": " What is the worst case time in searching minimum value in weak -heap?", "options": {"a": "O(log n)", "b": "O(n)", "c": "O(n logn)", "d": "O(1)"}, "correct": "b"}, "5": {"statement": " The total comparisons in finding both smallest and largest elements are", "options": {"a": "2*n +2", "b": "n + ((n+1)/2) -2", "c": "n+logn", "d": "n2"}, "correct": "b"}}}, "82": {"topic_name": "Binomial and Fibonacci Heap", "mcqs": {"1": {"statement": " The main distinguishable characterstic of a binomial heap from a binary heap is that", "options": {"a": "it allows union operations very efficiently", "b": "it does not allow union operations that could easily be implemented in binary heap", "c": "the heap structure is not similar to complete binary tree", "d": "the location of child node is not fixed i.e child nodes could be at level (h-2) or (h-3), where h is height of heap and h>4"}, "correct": "a"}, "2": {"statement": " The number of trees in a binomial heap with n nodes is", "options": {"a": "logn", "b": "n", "c": "nlogn", "d": "n/2"}, "correct": "b"}, "6": {"statement": " What is order of resultant heap after merging two tree of order k?", "options": {"a": "2*k", "b": "k+1", "c": "k*k", "d": "k+logk"}, "correct": "c"}, "7": {"statement": " Time taken in decreasing the node value in a binomial heap is", "options": {"a": "O(n)", "b": "O(1)", "c": "O(logn)", "d": "O(nlogn)"}, "correct": "c"}, "10": {"statement": " Which of these operations have same complexities?", "options": {"a": "Insertion, find_min", "b": "Find_min, union", "c": "Union, Insertion", "d": "Deletion, Find _max"}, "correct": "a"}, "12": {"statement": " Given a heap of n nodes.The maximum number of tree for building the heap is.", "options": {"a": "n", "b": "n-1", "c": "n/2", "d": "logn"}, "correct": "a"}}}, "83": {"topic_name": "D-ary Heap", "mcqs": {"1": {"statement": " d-heap is similar to that of a?", "options": {"a": "binary heap", "b": "fibonacci heap", "c": "leftist heap", "d": "treap"}, "correct": "a"}, "3": {"statement": " Which operation cannot be directly performed in a d-heap?", "options": {"a": "insert", "b": "delete", "c": "find", "d": "create"}, "correct": "d"}, "4": {"statement": " Which operation is not efficiently performed in a d-heap?", "options": {"a": "insert", "b": "delete", "c": "find", "d": "merge"}, "correct": "c"}, "5": {"statement": " What is the run time efficiency of an insertion algorithm in d-heap?", "options": {"a": "O(N)", "b": "O(log N)", "c": "O(logd N)", "d": "O(Nd)"}, "correct": "b"}, "6": {"statement": " How many comparisons will occur while performing a delete-min operation?", "options": {"a": "d", "b": "d-1", "c": "d+1", "d": "1"}, "correct": "b"}, "7": {"statement": " How many basic operations can be performed in a d-heap?", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "c"}, "8": {"statement": " What is the run time efficiency of delete-min operation?", "options": {"a": "O(log N)", "b": "O(logd N)", "c": "O(d logd N)", "d": "O(d)"}, "correct": "a"}, "9": {"statement": " The following figure is an example for\n", "options": {"a": "d-heap", "b": "binary heap", "c": "leftist heap", "d": "skew heap"}, "correct": "b"}, "11": {"statement": " How many secondary operations are performed in a d-heap?", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "d"}}}, "84": {"topic_name": "Ternary Heap \u2013 1", "mcqs": {"1": {"statement": " What is the smallest element of the given minimum ternary heap?\n", "options": {"a": "1", "b": "10", "c": "18", "d": "20"}, "correct": "a"}, "2": {"statement": " What is the highest element of the given maximum ternary heap?\n", "options": {"a": "31", "b": "10", "c": "18", "d": "20"}, "correct": "b"}, "3": {"statement": " What is the child of smallest element of the given minimum ternary heap?\n", "options": {"a": "1", "b": "10", "c": "22", "d": "24"}, "correct": "c"}, "4": {"statement": " What are the siblings of smallest element of the given maximum ternary heap?\n", "options": {"a": "31", "b": "12", "c": "18", "d": "22"}, "correct": "a"}, "5": {"statement": " What is the height of a given minimum ternary heap?\n", "options": {"a": "1", "b": "10", "c": "2", "d": "24"}, "correct": "a"}, "6": {"statement": " What is the ancestor of the leaf node in a given minimum ternary heap?\n", "options": {"a": "1", "b": "10", "c": "18", "d": "20"}, "correct": "d"}, "7": {"statement": " Which property should ternary heap hold for execution?", "options": {"a": "Associative", "b": "Commutative", "c": "Tree", "d": "Heap"}, "correct": "a"}, "9": {"statement": " What is the process of building a ternary heap called?", "options": {"a": "Heapify", "b": "Hashing", "c": "Linking", "d": "Merging"}, "correct": "c"}, "10": {"statement": " Which type of data structure is a ternary heap?", "options": {"a": "Array", "b": "Hash", "c": "Priority Queue", "d": "Priority Stack"}, "correct": "a"}, "12": {"statement": " What is a ternary heap?", "options": {"a": "An array with three elements", "b": "Linked list with three elements", "c": "Tree with three children", "d": "Heap with all nodes having three children"}, "correct": "c"}}}, "85": {"topic_name": "Ternary Heap \u2013 2", "mcqs": {"1": {"statement": " What is the time complexity for inserting a new item in a ternary heap of n elements?", "options": {"a": "O (log n/ log 3)", "b": "O (n!)", "c": "O (n)", "d": "O (1)"}, "correct": "a"}, "3": {"statement": " What is the time complexity for decreasing priority of key in a minimum ternary heap of n elements?", "options": {"a": "O (log n/ log 3)", "b": "O (n!)", "c": "O (n)", "d": "O (1)"}, "correct": "a"}, "4": {"statement": " What is the time complexity for increasing priority of key in a maximum ternary heap of n elements?", "options": {"a": "O (log n/ log 3)", "b": "O (n!)", "c": "O (n)", "d": "O (1)"}, "correct": "b"}, "5": {"statement": " What is the time complexity for deleting root key in a ternary heap of n elements?", "options": {"a": "O (log n/ log 3)", "b": "O (3log n/ log 3)", "c": "O (n)", "d": "O (1)"}, "correct": "b"}, "6": {"statement": " What is the time complexity for increasing priority of key in a minimum ternary heap of n elements?", "options": {"a": "O (log n/ log 3)", "b": "O (3log n/ log 3)", "c": "O (n)", "d": "O (1)"}, "correct": "b"}, "7": {"statement": " What is the time complexity for decreasing priority of key in a maximum ternary heap of n elements?", "options": {"a": "O (log n/ log 3)", "b": "O (3log n/ log 3)", "c": "O (n)", "d": "O (1)"}, "correct": "a"}, "9": {"statement": " What is the time complexity for creating a ternary heap using swapping?", "options": {"a": "O (log n/ log 3)", "b": "O (n!)", "c": "O (n)", "d": "O (1)"}, "correct": "a"}}}, "86": {"topic_name": "Pairing Heap", "mcqs": {"1": {"statement": " What is the reason for the efficiency of a pairing heap?", "options": {"a": "simplicity", "b": "time-efficient", "c": "space-efficient", "d": "advanced"}, "correct": "c"}, "2": {"statement": " How is a pairing heap represented?", "options": {"a": "binary tree", "b": "fibonacci tree", "c": "heap ordered tree", "d": "treap"}, "correct": "b"}, "4": {"statement": " Which node contains a pointer to its parent?", "options": {"a": "root node", "b": "right most child", "c": "left most child", "d": "left sibling"}, "correct": "b"}, "5": {"statement": " Which of the heaps is implemented by the following figure?\n", "options": {"a": "fibonacci heaps", "b": "pairing heap", "c": "skew heap", "d": "leftist heap"}, "correct": "a"}, "6": {"statement": " What is the basic operation performed in a pairing heap?", "options": {"a": "merge", "b": "deletion", "c": "insertion", "d": "swapping"}, "correct": "c"}, "7": {"statement": " If there are c children of the root, how many calls to the merge procedure is required to reassemble the heap?", "options": {"a": "c", "b": "c+1", "c": "c-1", "d": "1"}, "correct": "d"}, "8": {"statement": " Which of the following methods is the best choice for complex applications?", "options": {"a": "binary heap", "b": "d-heap", "c": "treap", "d": "pairing heap"}, "correct": "a"}, "9": {"statement": " Pairing heaps time complexity was inspired by that of?", "options": {"a": "splay tree", "b": "treap", "c": "red-black tree", "d": "avl tree"}, "correct": "b"}, "11": {"statement": " The amortized time efficiency for performing deletion of a minimum element is?", "options": {"a": "O(N)", "b": "O(log N)", "c": "O(N2)", "d": "O(M log N)"}, "correct": "a"}, "12": {"statement": " Out of the following given options, which is the fastest algorithm?", "options": {"a": "fibonacci heap", "b": "pairing heap", "c": "d-ary heap", "d": "binary heap"}, "correct": "a"}}}, "87": {"topic_name": "Leftlist Heap", "mcqs": {"2": {"statement": " How many properties does a leftist heap support?", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "d"}, "3": {"statement": " In a leftist heap, the null path length of a null node is defined as?", "options": {"a": "0", "b": "1", "c": "null", "d": "-1"}, "correct": "b"}, "4": {"statement": " How many nodes does a leftist tree with r nodes must have?", "options": {"a": "2r", "b": "2r-1", "c": "2r", "d": "2r-1"}, "correct": "c"}, "5": {"statement": " Which of the following operations does not destroy the leftist heap property?", "options": {"a": "insert", "b": "merge", "c": "delete", "d": "swap"}, "correct": "b"}, "6": {"statement": " What is the fundamental operation on leftist heap?", "options": {"a": "insertion", "b": "merging", "c": "deletion", "d": "swapping"}, "correct": "a"}, "8": {"statement": " What is the efficiency of merge used in leftist heaps?", "options": {"a": "O(N)", "b": "O(N log N)", "c": "O(M log N)", "d": "O(log N)"}, "correct": "c"}, "9": {"statement": " What is the node path length of a node with 0 or 1 child?", "options": {"a": "1", "b": "-1", "c": "0", "d": "null"}, "correct": "b"}, "10": {"statement": " Why is this heap named leftist heap?", "options": {"a": "only left subtrees exist", "b": "the tree is biased to get deep down the left", "c": "it is balanced", "d": "right trees are unbalanced"}, "correct": "c"}, "11": {"statement": " In a leftist heap, all the operations should be performed on?", "options": {"a": "left path", "b": "centre path", "c": "right path", "d": "root"}, "correct": "d"}, "12": {"statement": " What would be the result if the left subtree of the root has a null path length of 1 and the right subtree has a null path length of 2?", "options": {"a": "merge occurs without violation", "b": "violation at left subtree", "c": "violation at right subtree", "d": "violation at the root"}, "correct": "b"}, "13": {"statement": " What happens if the null path length is not updated?", "options": {"a": "error occurs", "b": "all null path lengths will be 0", "c": "all null path lengths will be -1", "d": "all null path lengths will be 1"}, "correct": "c"}, "14": {"statement": " What is the time taken to delete a minimum element in a leftist heap?", "options": {"a": "O(N)", "b": "O(N log N)", "c": "O(log N)", "d": "O(M log N)"}, "correct": "a"}}}, "88": {"topic_name": "Skew Heap", "mcqs": {"1": {"statement": " ___________ is a self-adjusting version of a leftist heap.", "options": {"a": "Rightist heap", "b": "Skew heap", "c": "d-heap", "d": "Binary heap"}, "correct": "a"}, "2": {"statement": " The worst case running time of all operations in a skew heap is given as?", "options": {"a": "O(N)", "b": "O(N log N)", "c": "O(N2)", "d": "O(M log N)"}, "correct": "d"}, "3": {"statement": " What is the amortized cost per operation of a skew heap?", "options": {"a": "O(N)", "b": "O(N log N)", "c": "O(N2)", "d": "O(log N)"}, "correct": "a"}, "4": {"statement": " The relationship of skew heaps to leftist heaps is analogous to that of?", "options": {"a": "Splay tree and AVL tree", "b": "Red black tree and AVL tree", "c": "Binary tree and Splay tree", "d": "Binary tree and Red black tree"}, "correct": "c"}, "5": {"statement": " What is the fundamental operation performed in skew heaps?", "options": {"a": "intersection", "b": "difference", "c": "merging", "d": "sorting"}, "correct": "b"}, "6": {"statement": " What is the time per operation of merging, insertion and deletion operations in a skew heap?", "options": {"a": "O(N)", "b": "O(log N)", "c": "O(N log N)", "d": "O(N2)"}, "correct": "c"}, "7": {"statement": " Why would a recursive implementation fail in skew heaps?", "options": {"a": "skew heaps are self adjusting", "b": "efficiency gets reduced", "c": "lack of stack space", "d": "time complexity"}, "correct": "a"}, "8": {"statement": " Which of the following is difficult to determine the right path length?", "options": {"a": "Skew heaps", "b": "Binomial tree", "c": "Leftist heap", "d": "d-heap"}, "correct": "a"}, "9": {"statement": " The worst case analysis for a na\u00efve merge is given as?", "options": {"a": "O(N)", "b": "O( log N)", "c": "O( N log N)", "d": "O(N2)"}, "correct": "b"}, "10": {"statement": " How many types of the merge are available in skew heaps?", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "b"}, "12": {"statement": " What is the amortized efficiency of skew merge?", "options": {"a": "O(N)", "b": "O( log N)", "c": "O( N log N)", "d": "O(N2)"}, "correct": "b"}}}, "89": {"topic_name": "Min/Max Heap", "mcqs": {"1": {"statement": " Descending priority queue can be implemented using ______", "options": {"a": "max heap", "b": "min heap", "c": "min-max heap", "d": "trie"}, "correct": "a"}, "3": {"statement": " Which of the following is the valid min heap?", "options": {"a": "", "b": "", "c": "", "d": ""}, "correct": "a"}, "6": {"statement": " The ascending heap property is ___________", "options": {"a": "A[Parent(i)] =A[i] ", "b": "A[Parent(i)] <= A[i] ", "c": "A[Parent(i)] >= A[i] ", "d": "A[Parent(i)] > 2 * A[i] "}, "correct": "b"}, "7": {"statement": " The procedure FindMin() to find the minimum element and the procedure DeleteMin() to delete the minimum element in min heap take _________", "options": {"a": "logarithmic and linear time constant respectively", "b": "constant and linear time respectively", "c": "constant and quadratic time respectively", "d": "constant and logarithmic time respectively"}, "correct": "a"}, "8": {"statement": " Which one of the following array elements represents a binary min heap?", "options": {"a": "12 10 8 25 14 17", "b": "8 10 12 25 14 17", "c": "25 17 14 12 10 8", "d": "14 17 25 10 12 8"}, "correct": "a"}, "9": {"statement": " In a binary min heap containing n elements, the largest element can be found in __________ time.", "options": {"a": "O(n)", "b": "O(nlogn)", "c": "O(logn)", "d": "O(1)"}, "correct": "b"}}}, "90": {"topic_name": "Trie", "mcqs": {"1": {"statement": " Trie is also known as _________", "options": {"a": "Digital Tree", "b": "Treap", "c": "Binomial Tree", "d": "2-3 Tree"}, "correct": "c"}, "2": {"statement": " What traversal over trie gives the lexicographical sorting of the set of the strings?", "options": {"a": "postorder", "b": "preorders", "c": "inorder", "d": "level order"}, "correct": "d"}, "3": {"statement": " Which of the following is the efficient data structure for searching words in dictionaries?", "options": {"a": "BST", "b": "Linked List", "c": "Balancded BST", "d": "Trie"}, "correct": "c"}, "4": {"statement": " Which of the following special type of trie is used for fast searching of the full texts?", "options": {"a": "Ctrie", "b": "Hash tree", "c": "Suffix tree", "d": "T tree"}, "correct": "a"}, "7": {"statement": " Which of the following is not true?", "options": {"a": "Trie requires less storage space than hashing", "b": "Trie allows listing of all the words with same prefix", "c": "Tries are collision free", "d": "Trie is also known as prefix tree"}, "correct": "d"}, "8": {"statement": " A program to search a contact from phone directory can be implemented efficiently using ______", "options": {"a": "a BST", "b": "a trie", "c": "a balanced BST", "d": "a binary tree"}, "correct": "b"}, "9": {"statement": " What can be the maximum depth of the trie with n strings and m as the maximum sting the length?", "options": {"a": "log2n", "b": "log2m", "c": "n", "d": "m"}, "correct": "a"}}}, "91": {"topic_name": "Suffix Tree \u2013 1", "mcqs": {"1": {"statement": " What is the other name for Suffix Tree?", "options": {"a": "Array", "b": "Stack", "c": "Priority Queue", "d": "PAT Tree"}, "correct": "b"}, "2": {"statement": " Which tree allows fast implementation of string operation?", "options": {"a": "Rope Tree", "b": "Suffix Tree", "c": "Tango Tree", "d": "Top Tree"}, "correct": "d"}, "3": {"statement": " How much time does construction of suffix tree take?", "options": {"a": "O (log M)", "b": "O (M!)", "c": "Exponential to Length of Tree", "d": "Linear to Length of Tree"}, "correct": "d"}, "4": {"statement": " How much space does construction of suffix tree takes?", "options": {"a": "O (log M)", "b": "Exponential to Length of Tree", "c": "O (M!)", "d": "Linear to Length of Tree"}, "correct": "b"}, "5": {"statement": " Which tree provides a linear time solution for substring operation?", "options": {"a": "Rope Tree", "b": "Suffix Tree", "c": "Tango Tree", "d": "Top Tree"}, "correct": "a"}, "6": {"statement": " Who proposed the concept of Suffix Tree?", "options": {"a": "Weiner", "b": "Samuel F. B. Morse", "c": "Friedrich Clemens Gerke", "d": "Alexander Morse"}, "correct": "c"}, "7": {"statement": " Who among the following provided the first online contribution of Suffix Tree?", "options": {"a": "Weiner", "b": "Samuel F. B. Morse", "c": "Ukkonen", "d": "Alexander Morse"}, "correct": "d"}, "8": {"statement": " What is the time complexity of Uttkonen\u2019s algorithm?", "options": {"a": "O (log n!)", "b": "O (n!)", "c": "O (n2)", "d": "O (n log n)"}, "correct": "b"}, "9": {"statement": " Who among the following provided the first suffix tree contribution for all alphabet?", "options": {"a": "Weiner", "b": "Farach", "c": "Ukkonen", "d": "Alexander Morse"}, "correct": "b"}, "10": {"statement": " Who among the following algorithm is used in external memory and compression of the suffix tree?", "options": {"a": "Weiner\u2019s algorithm", "b": "Farach\u2019s algorithm", "c": "Ukkonen\u2019s algorithm", "d": "Alexander Morse"}, "correct": "a"}, "11": {"statement": " Which statement is correct of suffix tree with a string of length n?", "options": {"a": "The tree has n leaves.", "b": "The tree has n roots", "c": "Height of Tree is n", "d": "Depth of tree is n"}, "correct": "b"}, "14": {"statement": " Which tree allows fast implementation of a set of string operation?", "options": {"a": "Rope Tree", "b": "Tango Tree", "c": "Generalized Suffix Tree", "d": "Top Tree"}, "correct": "d"}}}, "92": {"topic_name": "Suffix Tree \u2013 2", "mcqs": {"1": {"statement": " What is a time complexity for x pattern occurrence of length n?", "options": {"a": "O (log n!)", "b": "\u019f (n!)", "c": "O (n2)", "d": "\u019f (n + x)"}, "correct": "d"}, "2": {"statement": " What is a time complexity for finding the longest substring that is common in string S1 and S2 (n1 and n2 are the string lengths of strings s1, s2 respectively)?", "options": {"a": "O (log n!)", "b": "\u019f (n!)", "c": "O (n2+ n1)", "d": "\u019f (n1 + n2)"}, "correct": "d"}, "3": {"statement": " What is a time complexity for finding the longest substring that is repeated in a string?", "options": {"a": "O (log n!)", "b": "\u019f (n!)", "c": "O (n2+ n1)", "d": "\u019f (n)"}, "correct": "a"}, "4": {"statement": " What is a time complexity for finding frequently occurring of a substring of minimum length in a string?", "options": {"a": "\u019f (n)", "b": "\u019f (n!)", "c": "O (n2+ n1)", "d": "O (log n!)"}, "correct": "c"}, "5": {"statement": " What is a time complexity for finding the longest prefix that is common between suffix in a string?", "options": {"a": "\u019f (n)", "b": "\u019f (n!)", "c": "\u019f (1)", "d": "O (log n!)"}, "correct": "a"}, "6": {"statement": " What is a time complexity for finding all the maximal palindrome in a string?", "options": {"a": "\u019f (n)", "b": "\u019f (n!)", "c": "\u019f (1)", "d": "O (log n!)"}, "correct": "a"}, "7": {"statement": " What is a time complexity for finding all the tandem repeats?", "options": {"a": "\u019f (n)", "b": "\u019f (n!)", "c": "\u019f (1)", "d": "O (n log n + z)"}, "correct": "a"}, "8": {"statement": " What is a time complexity for finding the longest palindromic substring in a string by using the generalized suffix tree?", "options": {"a": "Linear Time", "b": "Exponential Time", "c": "Logarithmic Time", "d": "Cubic Time"}, "correct": "c"}, "9": {"statement": " Which of the following algorithm of data compression uses a suffix tree?", "options": {"a": "Weiner\u2019s algorithm", "b": "Farach\u2019s algorithm", "c": "Lempel \u2013 Ziv \u2013 Welch\u2019s algorithm", "d": "Alexander Morse\u2019s algorithm"}, "correct": "d"}, "10": {"statement": " Which of the following data clustering algorithm uses suffix tree in search engines?", "options": {"a": "Weiner\u2019s algorithm", "b": "Farach\u2019s algorithm", "c": "Lempel \u2013 Ziv \u2013 Welch\u2019s algorithm", "d": "Suffix Tree Clustering"}, "correct": "d"}, "11": {"statement": " What is a time complexity for finding the total length of all string on all edges of a tree?", "options": {"a": "\u019f (n)", "b": "\u019f (n!)", "c": "\u019f (1)", "d": "O (n2)"}, "correct": "a"}, "14": {"statement": " For what size of nodes, the worst case of usage of space in suffix tree seen?", "options": {"a": "n Nodes", "b": "2n Nodes", "c": "2n nodes", "d": "n! nodes"}, "correct": "d"}}}, "93": {"topic_name": "Hash Tables", "mcqs": {"1": {"statement": " What is a hash table?", "options": {"a": "A structure that maps values to keys", "b": "A structure that maps keys to values", "c": "A structure used for storage", "d": "A structure used to implement stack and queue"}, "correct": "c"}, "2": {"statement": " If several elements are competing for the same bucket in the hash table, what is it called?", "options": {"a": "Diffusion", "b": "Replication", "c": "Collision", "d": "Duplication"}, "correct": "a"}, "3": {"statement": " What is direct addressing?", "options": {"a": "Distinct array position for every possible key", "b": "Fewer array positions than keys", "c": "Fewer keys than array positions", "d": "Same array position for all keys"}, "correct": "d"}, "4": {"statement": " What is the search complexity in direct addressing?", "options": {"a": "O(n)", "b": "O(logn)", "c": "O(nlogn)", "d": "O(1)"}, "correct": "b"}, "5": {"statement": " What is a hash function?", "options": {"a": "A function has allocated memory to keys", "b": "A function that computes the location of the key in the array", "c": "A function that creates an array", "d": "A function that computes the location of the values in the array"}, "correct": "d"}, "6": {"statement": " Which of the following is not a technique to avoid a collision?", "options": {"a": "Make the hash function appear random", "b": "Use the chaining method", "c": "Use uniform hashing", "d": "Increasing hash table size"}, "correct": "c"}, "7": {"statement": " What is the load factor?", "options": {"a": "Average array size", "b": "Average key size", "c": "Average chain length", "d": "Average hash table length"}, "correct": "a"}, "8": {"statement": " What is simple uniform hashing?", "options": {"a": "Every element has equal probability of hashing into any of the slots", "b": "A weighted probabilistic method is used to hash elements into the slots", "c": "Elements has Random probability of hashing into array slots", "d": "Elements are hashed based on priority"}, "correct": "d"}, "9": {"statement": " In simple uniform hashing, what is the search complexity?", "options": {"a": "O(n)", "b": "O(logn)", "c": "O(nlogn)", "d": "O(1)"}, "correct": "b"}}}, "94": {"topic_name": "Hash Tables Chaining using Linked Lists", "mcqs": {"1": {"statement": " The case in which a key other than the desired one is kept at the identified location is called?", "options": {"a": "Hashing", "b": "Collision", "c": "Chaining", "d": "Open addressing"}, "correct": "c"}, "2": {"statement": " What data organization method is used in hash tables?", "options": {"a": "Stack", "b": "Array", "c": "Linked list", "d": "Queue"}, "correct": "a"}, "3": {"statement": " The task of generating alternative indices for a node is called?", "options": {"a": "Collision handling", "b": "Collision detection", "c": "Collision recovery", "d": "Closed hashing"}, "correct": "d"}, "4": {"statement": " Which of the following is not a collision resolution technique?", "options": {"a": "Separate chaining", "b": "Linear probing", "c": "Quadratic probing", "d": "Hashing"}, "correct": "a"}, "6": {"statement": " In a hash table of size 10, where is element 7 placed?", "options": {"a": "6", "b": "7", "c": "17", "d": "16"}, "correct": "b"}, "7": {"statement": " What should be the load factor for separate chaining hashing?", "options": {"a": "0.5", "b": "1", "c": "1.5", "d": "2"}, "correct": "c"}, "8": {"statement": " Which of the following operations are done in a hash table?", "options": {"a": "Insert only", "b": "Search only", "c": "Insert and search", "d": "Replace"}, "correct": "a"}, "9": {"statement": " Which of the following is identical to that of a separate chaining hash node?", "options": {"a": "Linked list", "b": "Array", "c": "Stack", "d": "Queue"}, "correct": "c"}, "10": {"statement": " Which of the following is the hashing function for separate chaining?", "options": {"a": "H(x)=(hash(x)+f(i)) mod table size", "b": "H(x)=hash(x)+i2  mod table size", "c": "H(x)=x mod table size", "d": "H(x)=x mod (table size * 2)"}, "correct": "d"}, "11": {"statement": " What is the correct notation for a load factor?", "options": {"a": "\u2126", "b": "\u221e", "c": "\u2211", "d": "\u2144"}, "correct": "c"}, "12": {"statement": " In hash tables, how many traversal of links does a successful search require?", "options": {"a": "1+\u2144", "b": "1+\u21442", "c": "1+ (\u2144/2)", "d": "\u21443"}, "correct": "a"}, "13": {"statement": " Which of the following is a disadvantage of using separate chaining using linked lists?", "options": {"a": "It requires many pointers", "b": "It requires linked lists", "c": "It uses array", "d": "It does not resolve collision"}, "correct": "b"}, "14": {"statement": " What is the worst case search time of a hashing using separate chaining algorithm?", "options": {"a": "O(N log N)", "b": "O(N)", "c": "O(N2)", "d": "O(N3)"}, "correct": "c"}}}, "95": {"topic_name": "Hash Tables Chaining using Doubly Linked Lists", "mcqs": {"1": {"statement": " Which of the following is used in hash tables to determine the index of any input record?", "options": {"a": "hash function", "b": "hash linked list", "c": "hash tree", "d": "hash chaining"}, "correct": "a"}, "2": {"statement": " What is the advantage of a hash table as a data structure?", "options": {"a": "faster access of data", "b": "easy to implement", "c": "very efficient for less number of entries", "d": "exhibit good locality of reference"}, "correct": "a"}, "3": {"statement": " What is the use of a hash function?", "options": {"a": "to calculate and return the index of corresponding data", "b": "to store data", "c": "to erase data", "d": "to change data"}, "correct": "a"}, "4": {"statement": " What is the time complexity of insert function in a hash table using a doubly linked list?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(log n)", "d": "O(n log n)"}, "correct": "a"}, "5": {"statement": " What is the time complexity of search function in a hash table using a doubly linked list?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(log n)", "d": "O(n log n)"}, "correct": "a"}, "6": {"statement": " What is the time complexity of delete function in the hash table using a doubly linked list?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(log n)", "d": "O(n log n)"}, "correct": "a"}, "8": {"statement": " What is the advantage of using a doubly linked list for chaining over singly linked list?", "options": {"a": "it takes less memory", "b": "it is easy to implement", "c": "it makes the process of insertion and deletion faster", "d": "it causes less collisions"}, "correct": "a"}, "9": {"statement": " Which of the following technique stores data in the hash table itself in case of a collision?", "options": {"a": "Open addressing", "b": "Chaining using linked list", "c": "Chaining using doubly linked list", "d": "Chaining using binary tree"}, "correct": "b"}, "10": {"statement": " Which of the following technique stores data in a separate entity in case of a collision?", "options": {"a": "Open addressing", "b": "Chaining using doubly linked list", "c": "Linear probing", "d": "Double hashing"}, "correct": "a"}}}, "96": {"topic_name": "Hash Tables Chaining with Binary Trees", "mcqs": {"1": {"statement": " Which of the following variant of a hash table has the best cache performance?", "options": {"a": "hash table using a linked list for separate chaining", "b": "hash table using binary search tree for separate chaining", "c": "hash table using open addressing", "d": "hash table using a doubly linked list for separate chaining"}, "correct": "c"}, "2": {"statement": " What is the advantage of hashing with chaining?", "options": {"a": "cache performance is good", "b": "uses less space", "c": "less sensitive to hash function", "d": "has a time complexity of O(n) in the worst case"}, "correct": "b"}, "3": {"statement": " What is the disadvantage of hashing with chaining?", "options": {"a": "not easy to implement", "b": "takes more space", "c": "quite sensitive to hash function", "d": "table gets filled up easily"}, "correct": "a"}, "4": {"statement": " What is the time complexity of insert function in a hash table using a binary tree?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(log n)", "d": "O(n log n)"}, "correct": "a"}, "5": {"statement": " What is the time complexity of the search function in a hash table using a binary tree?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(log n)", "d": "O(n log n)"}, "correct": "a"}, "6": {"statement": " What is the time complexity of the delete function in the hash table using a binary tree?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(log n)", "d": "O(n log n)"}, "correct": "a"}, "7": {"statement": " What is the advantage of a hash table over BST?", "options": {"a": "hash table has a better average time complexity for performing insert, delete and search operations", "b": "hash table requires less space", "c": "range query is easy with hash table", "d": "easier to implement"}, "correct": "d"}, "8": {"statement": " What is the disadvantage of BST over the hash table?", "options": {"a": "BST is easier to implement", "b": "BST can get the keys sorted by just performing inorder traversal", "c": "BST can perform range query easily", "d": "Time complexity of hash table in inserting, searching and deleting is less than that of BST"}, "correct": "d"}, "9": {"statement": " Which of the following technique stores data separately in case of a collision?", "options": {"a": "Open addressing", "b": "Double hashing", "c": "Quadratic probing", "d": "Chaining using a binary tree"}, "correct": "a"}}}, "97": {"topic_name": "Hash Tables Chaining with List Heads", "mcqs": {"1": {"statement": " Which of the following helps keys to be mapped into addresses?", "options": {"a": "hash function", "b": "separate chaining", "c": "open addressing", "d": "chaining using a linked list"}, "correct": "a"}, "2": {"statement": " What is the advantage of the hash table over a linked list?", "options": {"a": "faster access of data", "b": "easy to implement", "c": "very efficient for less number of entries", "d": "exhibit good locality of reference"}, "correct": "a"}, "3": {"statement": " Which of the following trait of a hash function is most desirable?", "options": {"a": "it should cause less collisions", "b": "it should cause more collisions", "c": "it should occupy less space", "d": "it should be easy to implement"}, "correct": "a"}, "4": {"statement": " What is the time complexity of insert function in a hash table using list head?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(log n)", "d": "O(n log n)"}, "correct": "a"}, "5": {"statement": " What is the time complexity of search function in a hash table using list head?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(log n)", "d": "O(n log n)"}, "correct": "a"}, "6": {"statement": " What is the time complexity of delete function in the hash table using list head?", "options": {"a": "O(1)", "b": "O(n)", "c": "O(log n)", "d": "O(n log n)"}, "correct": "a"}, "8": {"statement": " What is the advantage of using linked list over the doubly linked list for chaining?", "options": {"a": "it takes less memory", "b": "it causes more collisions", "c": "it makes the process of insertion and deletion faster", "d": "it causes less collisions"}, "correct": "d"}, "9": {"statement": " What is the worst case time complexity of insert function in the hash table when the list head is used for chaining?", "options": {"a": "O(1)", "b": "O(n log n)", "c": "O(log n)", "d": "O(n)"}, "correct": "a"}, "10": {"statement": " Which of the following technique is used for handling collisions in a hash table?", "options": {"a": "Open addressing", "b": "Hashing", "c": "Searching", "d": "Hash function"}, "correct": "b"}}}, "98": {"topic_name": "Hash Tables with Linear Probing", "mcqs": {"1": {"statement": " Which of the following problems occur due to linear probing?", "options": {"a": "Primary collision", "b": "Secondary collision", "c": "Separate chaining", "d": "Extendible hashing"}, "correct": "c"}, "2": {"statement": " How many probes are required on average for insertion and successful search?", "options": {"a": "4 and 10", "b": "2 and 6", "c": "2.5 and 1.5", "d": "3.5 and 1.5"}, "correct": "b"}, "3": {"statement": " What is the load factor for an open addressing technique?", "options": {"a": "1", "b": "0.5", "c": "1.5", "d": "0"}, "correct": "d"}, "4": {"statement": " Which of the following is not a collision resolution strategy for open addressing?", "options": {"a": "Linear probing", "b": "Quadratic probing", "c": "Double hashing", "d": "Rehashing"}, "correct": ":"}, "6": {"statement": " Which of the following is the correct function definition for linear probing?", "options": {"a": "F(i)= 1", "b": "F(i)=i", "c": "F(i)=i2", "d": "F(i)=i+1"}, "correct": "b"}, "7": {"statement": " ___________  is not a theoretical problem but actually occurs in real implementations of probing.", "options": {"a": "Hashing", "b": "Clustering", "c": "Rehashing", "d": "Collision"}, "correct": "c"}, "8": {"statement": " What is the hash function used in linear probing?", "options": {"a": "H(x)= key mod table size", "b": "H(x)= (key+ F(i2)) mod table size", "c": "H(x)= (key+ F(i)) mod table size", "d": "H(x)= X mod 17"}, "correct": "a"}}}, "99": {"topic_name": "Hash Tables with Quadratic Probing", "mcqs": {"1": {"statement": " Which of the following schemes does quadratic probing come under?", "options": {"a": "rehashing", "b": "extended hashing", "c": "separate chaining", "d": "open addressing"}, "correct": "a"}, "3": {"statement": " What kind of deletion is implemented by hashing using open addressing?", "options": {"a": "active deletion", "b": "standard deletion", "c": "lazy deletion", "d": "no deletion"}, "correct": "b"}, "5": {"statement": " Which of the following is the correct function definition for quadratic probing?", "options": {"a": "F(i)=i2", "b": "F(i)=i", "c": "F(i)=i+1", "d": "F(i)=i2+1"}, "correct": "b"}, "6": {"statement": " How many constraints are to be met to successfully implement quadratic probing?", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "a"}, "7": {"statement": "  Which among the following is the best technique to handle collision?", "options": {"a": "Quadratic probing", "b": "Linear probing", "c": "Double hashing", "d": "Separate chaining"}, "correct": "b"}, "8": {"statement": " Which of the following techniques offer better cache performance?", "options": {"a": "Quadratic probing", "b": "Linear probing", "c": "Double hashing", "d": "Rehashing"}, "correct": "c"}, "9": {"statement": " What is the formula used in quadratic probing?", "options": {"a": "Hash key = key mod table size", "b": "Hash key=(hash(x)+F(i)) mod table size", "c": "Hash key=(hash(x)+F(i2)) mod table size", "d": "H(x) = x mod 17"}, "correct": "b"}}}, "100": {"topic_name": "Hashing Functions", "mcqs": {"1": {"statement": " Which scheme uses a randomization approach?", "options": {"a": "hashing by division", "b": "hashing by multiplication", "c": "universal hashing", "d": "open addressing"}, "correct": "a"}, "2": {"statement": " Which hash function satisfies the condition of simple uniform hashing?", "options": {"a": "h(k) = lowerbound(km)", "b": "h(k)= upperbound(mk)", "c": "h(k)= lowerbound(k)", "d": "h(k)= upperbound(k)"}, "correct": "b"}, "6": {"statement": " What is the hash function used in the division method?", "options": {"a": "h(k) = k/m", "b": "h(k) = k mod m", "c": "h(k) = m/k", "d": "h(k) = m  mod k"}, "correct": "b"}, "7": {"statement": " What can be the value of m in the division method?", "options": {"a": "Any prime number", "b": "Any even number", "c": "2p \u2013 1", "d": "2p"}, "correct": "c"}, "8": {"statement": " Which scheme provides good performance?", "options": {"a": "open addressing", "b": "universal hashing", "c": "hashing by division", "d": "hashing by multiplication"}, "correct": "d"}, "9": {"statement": " Using division method, in a given hash table of size 157, the key of value 172 be placed at position ____", "options": {"a": "19", "b": "72", "c": "15", "d": "17"}, "correct": "a"}, "10": {"statement": " How many steps are involved in creating a hash function using a multiplication method?", "options": {"a": "1", "b": "4", "c": "3", "d": "2"}, "correct": "c"}, "11": {"statement": " What is the hash function used in multiplication method?", "options": {"a": "h(k) = floor( m(kA mod 1))", "b": "h(k) = ceil( m(kA mod 1))", "c": "h(k) = floor(kA mod m)", "d": "h(k) = ceil( kA mod m)"}, "correct": "b"}, "12": {"statement": " What is the advantage of the multiplication method?", "options": {"a": "only 2 steps are involved", "b": "using constant", "c": "value of m not critical", "d": "simple multiplication"}, "correct": "d"}, "13": {"statement": " What is the table size when the value of p is 7 in multiplication method of creating hash functions?", "options": {"a": "14", "b": "128", "c": "49", "d": "127"}, "correct": "a"}, "14": {"statement": " What is the value of h(k) for the key 123456?\n\tGiven: p=14, s=2654435769, w=32", "options": {"a": "123", "b": "456", "c": "70", "d": "67"}, "correct": "a"}}}, "101": {"topic_name": "Double Hashing", "mcqs": {"2": {"statement": " What is the hash function used in Double Hashing?", "options": {"a": "(h1(k) \u2013 i*h2(k))mod m", "b": "h1(k) + h2(k)", "c": "(h1(k) + i*h2(k))mod m", "d": "(h1(k) + h2(k))mod m"}, "correct": "b"}, "3": {"statement": " On what value does the probe sequence depend on?", "options": {"a": "c1", "b": "k", "c": "c2", "d": "m"}, "correct": "b"}, "9": {"statement": " Which technique has the greatest number of probe sequences?", "options": {"a": "Linear probing", "b": "Quadratic probing", "c": "Double hashing", "d": "Closed hashing"}, "correct": "c"}}}, "102": {"topic_name": "Hash Tree", "mcqs": {"1": {"statement": " Hash tree is generalization of ______", "options": {"a": "Heap", "b": "Hash list", "c": "BST", "d": "B \u2013 tree"}, "correct": "a"}, "3": {"statement": " Which of the following is a widely used form of the hash tree?", "options": {"a": "B+ \u2013 tree", "b": "T tree", "c": "Tiger tree hash", "d": "Htree"}, "correct": "d"}, "4": {"statement": " Which of the following is true for a Hash tree?", "options": {"a": "Hashing is used for sequential access", "b": "Indexing is used for direct access", "c": "Hash tree allows only sequential access", "d": "Hashing is used for direct access"}, "correct": "a"}, "5": {"statement": " Hash tree is also known as _____", "options": {"a": "Merkle tree", "b": "T -tree", "c": "Hash table", "d": "Bx-tree"}, "correct": "c"}, "6": {"statement": " What will be the height of the hash tree with branching factor 2 and with 8 records?", "options": {"a": "3", "b": "5", "c": "4", "d": "6"}, "correct": "a"}, "7": {"statement": " Where is the hash tree used?", "options": {"a": "in digital currency", "b": "in sorting of large data", "c": "for indexing in databases", "d": "in encryption of data"}, "correct": "a"}, "8": {"statement": " What is the worst case time complexity of the insertion in the hash tree?", "options": {"a": "O(logk(n))", "b": "O(n2)", "c": "O(nlogk(n))", "d": "O(kn)"}, "correct": "a"}}}, "103": {"topic_name": "Min Hash", "mcqs": {"1": {"statement": " Which technique is used for finding similarity between two sets?", "options": {"a": "MinHash", "b": "Stack", "c": "Priority Queue", "d": "PAT Tree"}, "correct": "d"}, "2": {"statement": " Who invented the MinHash technique?", "options": {"a": "Weiner", "b": "Samuel F. B. Morse", "c": "Friedrich Clemens Gerke", "d": "Andrei Broder"}, "correct": "a"}, "3": {"statement": " Which technique was firstly used to remove duplicate web pages from search results in AltaVista search engine?", "options": {"a": "MinHash", "b": "Stack", "c": "Priority Queue", "d": "PAT Tree"}, "correct": "a"}, "4": {"statement": " Which technique was firstly used clustering documents using the similarity of two words or strings?", "options": {"a": "MinHash", "b": "Stack", "c": "Priority Queue", "d": "PAT Tree"}, "correct": "b"}, "5": {"statement": " Which indicator is used for similarity between two sets?", "options": {"a": "Rope Tree", "b": "Jaccard Coefficient", "c": "Tango Tree", "d": "MinHash Coefficient"}, "correct": "b"}, "6": {"statement": " Which of the following is defined as the ratio of total elements of intersection and union of two sets?", "options": {"a": "Rope Tree", "b": "Jaccard Coefficient Index", "c": "Tango Tree", "d": "MinHash Coefficient"}, "correct": "d"}, "7": {"statement": " What is the value of the Jaccard index when the two sets are disjoint?", "options": {"a": "1", "b": "2", "c": "3", "d": "0"}, "correct": "a"}, "8": {"statement": " When are the members of two sets more common relatively?", "options": {"a": "Jaccard Index is Closer to 1", "b": "Jaccard Index is Closer to 0", "c": "Jaccard Index is Closer to -1", "d": "Jaccard Index is Farther to 1"}, "correct": "d"}, "9": {"statement": " What is the expected error for estimating the Jaccard index using MinHash scheme for k different hash functions?", "options": {"a": "O (log k!)", "b": "O (k!)", "c": "O (k2)", "d": "O (1/k\u00bd)"}, "correct": "d"}, "10": {"statement": " How many hashes will be needed for calculating Jaccard index with an expected error less than or equal to 0.05?", "options": {"a": "100", "b": "200", "c": "300", "d": "400"}, "correct": "d"}, "11": {"statement": " What is the expected error by the estimator Chernoff bound on the samples performed without replacement?", "options": {"a": "O (log k!)", "b": "O (k!)", "c": "O (k2)", "d": "O (1/k\u00bd)"}, "correct": "d"}, "12": {"statement": " What is the time required for single variant hashing to maintain the minimum hash queue?", "options": {"a": "O (log n!)", "b": "O (n!)", "c": "O (n2)", "d": "O (n)"}, "correct": "d"}, "13": {"statement": " How many bits are needed to specify the single permutation by min-wise independent family?", "options": {"a": "O (log n!)", "b": "O (n!)", "c": "\u03a9 (n2)", "d": "\u03a9 (n)"}, "correct": "a"}}}, "104": {"topic_name": "Direct Addressing Tables", "mcqs": {"1": {"statement": " What is direct addressing?", "options": {"a": "Distinct array position for every possible key", "b": "Fewer array positions than keys", "c": "Fewer keys than array positions", "d": "Distinct array positions for keys based on priority"}, "correct": "b"}, "2": {"statement": " When is it appropriate to use direct addressing?", "options": {"a": "When the array is comparatively large", "b": "When the universe U of keys is reasonably small", "c": "When the universe U of keys is reasonably large", "d": "When the array is comparatively small"}, "correct": "d"}, "3": {"statement": " What is the search complexity in direct addressing?", "options": {"a": "O(n)", "b": "O(logn)", "c": "O(nlogn)", "d": "O(1)"}, "correct": "d"}, "4": {"statement": " What is the time complexity to insert an element into the direct address table?", "options": {"a": "O(n)", "b": "O(logn)", "c": "O(nlogn)", "d": "O(1)"}, "correct": "b"}, "5": {"statement": " What is the advantage of using a dynamic set in direct addressing?", "options": {"a": "It saves time", "b": "It saves space", "c": "It saves both time and space", "d": "It reduces code complexity"}, "correct": "d"}, "6": {"statement": " What is the time complexity to delete an element from the direct address table?", "options": {"a": "O(n)", "b": "O(logn)", "c": "O(nlogn)", "d": "O(1)"}, "correct": "b"}}}, "105": {"topic_name": "Graph", "mcqs": {"1": {"statement": " Which of the following statements for a simple graph is correct?", "options": {"a": "Every path is a trail", "b": "Every trail is a path", "c": "Every trail is a path as well as every path is a trail", "d": "Path and trail have no relation"}, "correct": "d"}, "2": {"statement": " In the given graph identify the cut vertices.\n", "options": {"a": "B and E", "b": "C and D", "c": "A and E", "d": "C and B"}, "correct": "c"}, "3": {"statement": " For the given graph(G), which of the following statements is true?\n", "options": {"a": "G is a complete graph", "b": "G is not a connected graph", "c": "The vertex connectivity of the graph is 2", "d": "The edge connectivity of the graph is 1"}, "correct": "b"}, "4": {"statement": "  What is the number of edges present in a complete graph having n vertices?", "options": {"a": "(n*(n+1))/2", "b": "(n*(n-1))/2", "c": "n", "d": "Information given is insufficient"}, "correct": "a"}, "7": {"statement": " A connected planar graph having 6 vertices, 7 edges contains _____________ regions.", "options": {"a": "15", "b": "3", "c": "1", "d": "11"}, "correct": "a"}, "8": {"statement": " If a simple graph G, contains n vertices and m edges, the number of edges in the Graph G'(Complement of G) is  ___________", "options": {"a": "(n*n-n-2*m)/2", "b": "(n*n+n+2*m)/2", "c": "(n*n-n-2*m)/2", "d": "(n*n-n+2*m)/2"}, "correct": "a"}, "9": {"statement": " Which of the following properties does a simple graph not hold?", "options": {"a": "Must be connected", "b": "Must be unweighted", "c": "Must have no loops or multiple edges", "d": "Must have no multiple edges"}, "correct": "c"}, "10": {"statement": " What is the maximum number of edges in a bipartite graph having 10 \tvertices?", "options": {"a": "24", "b": "21", "c": "25", "d": "16"}, "correct": "b"}, "11": {"statement": " Which of the following is true?", "options": {"a": "A graph may contain no edges and many vertices", "b": "A graph may contain many edges and no vertices", "c": "A graph may contain no edges and no vertices", "d": "A graph may contain no vertices and many edges"}, "correct": "b"}, "12": {"statement": " For a given graph G having v vertices and e edges which is connected and has no cycles, which of the following statements is true?", "options": {"a": "v=e", "b": "v = e+1", "c": "v + 1 = e", "d": "v = e-1"}, "correct": "a"}, "13": {"statement": " For which of the following combinations of the degrees of vertices would the connected graph be eulerian?", "options": {"a": "1,2,3", "b": "2,3,4", "c": "2,4,5", "d": "1,3,5"}, "correct": "b"}, "14": {"statement": " A graph with all vertices having equal degree is known as a __________", "options": {"a": "Multi Graph", "b": "Regular Graph", "c": "Simple Graph", "d": "Complete Graph"}, "correct": "c"}}}, "106": {"topic_name": "Adjacency Matrix", "mcqs": {"1": {"statement": " The number of elements in the adjacency matrix of a graph having 7 vertices is __________", "options": {"a": "7", "b": "14", "c": "36", "d": "49"}, "correct": "b"}, "2": {"statement": " What would be the number of zeros in the adjacency matrix of the given graph?\n", "options": {"a": "10", "b": "6", "c": "16", "d": "0"}, "correct": "a"}, "4": {"statement": " The time complexity to calculate the number of edges in a graph whose information in stored in form of an adjacency matrix is ____________", "options": {"a": "O(V)", "b": "O(E2)", "c": "O(E)", "d": "O(V2)"}, "correct": "b"}, "5": {"statement": " For the adjacency matrix of a directed graph the row sum is the _________ degree and the column sum is the ________ degree.", "options": {"a": "in, out", "b": "out, in", "c": "in, total", "d": "total, out"}, "correct": "c"}, "6": {"statement": " What is the maximum number of possible non zero values in an adjacency matrix of a simple graph with n vertices?", "options": {"a": "(n*(n-1))/2", "b": "(n*(n+1))/2", "c": "n*(n-1)", "d": "n*(n+1)"}, "correct": "c"}, "7": {"statement": " On which of the following statements does the time complexity of checking if an edge exists between two particular vertices is not, depends?", "options": {"a": "Depends on the number of edges", "b": "Depends on the number of vertices", "c": "Is independent of both the number of edges and vertices", "d": "It depends on both the number of edges and vertices"}, "correct": "a"}, "8": {"statement": " In the given connected graph G, what is the value of rad(G) and diam(G)?", "options": {"a": "2, 3", "b": "3, 2", "c": "2, 2", "d": "3, 3"}, "correct": "d"}, "9": {"statement": " Which of these adjacency matrices represents a simple graph?", "options": {"a": "[ [1, 0, 0], [0, 1, 0], [0, 1, 1] ] ", "b": "[ [1, 1, 1], [1, 1, 1], [1, 1, 1] ] ", "c": "[ [0, 0, 1], [0, 0, 0], [0, 0, 1] ] ", "d": "[ [0, 0, 1], [1, 0, 1], [1, 0, 0] ] "}, "correct": "c"}, "10": {"statement": " Given an adjacency matrix A = [ [0, 1, 1], [1, 0, 1], [1, 1, 0] ], The total no. of ways in which every vertex can walk to itself using 2 edges is ________", "options": {"a": "2", "b": "4", "c": "6", "d": "8"}, "correct": "a"}, "11": {"statement": " If A[x+3][y+5] represents an adjacency matrix, which of these could be the value of x and y.", "options": {"a": "x=5, y=3", "b": "x=3, y=5", "c": "x=3, y=3", "d": "x=5, y=5"}, "correct": "a"}}}, "107": {"topic_name": "Incidence Matrix and Graph Structured Stack", "mcqs": {"2": {"statement": " The column sum in an incidence matrix for a simple graph is __________", "options": {"a": "depends on number of edges", "b": "always greater than 2", "c": "equal to 2", "d": "equal to the number of edges"}, "correct": "b"}, "3": {"statement": " What are the dimensions of an incidence matrix?", "options": {"a": "Number of edges*number of edges", "b": "Number of edges*number of vertices", "c": "Number of vertices*number of vertices", "d": "Number of edges * (1\u20442 * number of vertices)"}, "correct": "a"}, "4": {"statement": " The column sum in an incidence matrix for a directed graph having no self loop is __________", "options": {"a": "0", "b": "1", "c": "2", "d": "equal to the number of edges"}, "correct": "d"}, "5": {"statement": " Time complexity to check if an edge exists between two vertices would be ___________", "options": {"a": "O(V*V)", "b": "O(V+E)", "c": "O(1)", "d": "O(E)"}, "correct": "a"}, "8": {"statement": " If a connected Graph (G) contains n vertices what would be the rank of its incidence matrix?", "options": {"a": "n-1", "b": "values greater than n are possible", "c": "values less than n-1 are possible", "d": "insufficient Information is given"}, "correct": "c"}, "9": {"statement": " In the following DAG find out the number of required Stacks in order to represent it in a Graph Structured Stack.\n", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "c"}, "10": {"statement": " A Graph Structured Stack is a _____________", "options": {"a": "Undirected Graph", "b": "Directed Graph", "c": "Directed Acyclic Graph", "d": "Regular Graph"}, "correct": "b"}, "11": {"statement": " If a Graph Structured Stack contains {1,2,3,4} {1,5,3,4} {1,6,7,4} and {8,9,7,4}, what would be the source and sink vertices of the DAC?", "options": {"a": "Source \u2013 1, 8 Sink \u2013 7,4", "b": "Source \u2013 1 Sink \u2013 8,4", "c": "Source \u2013 1, 8 Sink \u2013 4", "d": "Source \u2013 4, Sink \u2013 1,8"}, "correct": " "}}}, "108": {"topic_name": "Adjacency List", "mcqs": {"1": {"statement": " Space complexity for an adjacency list of an undirected graph having large values of V (vertices) and E (edges) is ___________", "options": {"a": "O(E)", "b": "O(V*V)", "c": "O(E+V)", "d": "O(V)"}, "correct": "a"}, "3": {"statement": " Time complexity to find if there is an edge between 2 particular vertices is _________", "options": {"a": "O(V)", "b": "O(E)", "c": "O(1)", "d": "O(V+E)"}, "correct": "a"}, "4": {"statement": " For the given conditions, which of the following is in the correct order of increasing space requirement?\ni) Undirected, no weight\nii) Directed, no weight\niii) Directed, weighted\niv) Undirected, weighted", "options": {"a": "ii iii i iv", "b": "i iii ii iv", "c": "iv iii i ii", "d": "i ii iii iv"}, "correct": "c"}, "5": {"statement": " Space complexity for an adjacency list of an undirected graph having large values of V (vertices) and E (edges) is __________", "options": {"a": "O(V)", "b": "O(E*E)", "c": "O(E)", "d": "O(E+V)"}, "correct": "c"}, "8": {"statement": " In which case adjacency list is preferred in front of an adjacency matrix?", "options": {"a": "Dense graph", "b": "Sparse graph", "c": "Adjacency list is always preferred", "d": "Complete graph"}, "correct": "a"}}}, "109": {"topic_name": "Undirected Graph", "mcqs": {"1": {"statement": "  The number of possible undirected graphs which may have self loops but no multiple edges and have n vertices  is ________", "options": {"a": "2((n*(n-1))/2)", "b": "2((n*(n+1))/2)", "c": "2((n-1)*(n-1))/2)", "d": "2((n*n)/2)"}, "correct": "b"}, "2": {"statement": " Given a plane graph, G having 2 connected component, having 6 vertices, 7 edges and 4 regions. What will be the number of connected components?", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "d"}, "3": {"statement": " Number of vertices with odd degrees in a graph having a eulerian  walk is ________", "options": {"a": "0", "b": "Can\u2019t be predicted", "c": "2", "d": "either 0 or 2"}, "correct": "b"}, "4": {"statement": " How many of the following statements are correct?\ni)  All cyclic graphs are complete graphs.\nii) All complete graphs are cyclic graphs.\niii) All paths are bipartite.\niv) All cyclic graphs are bipartite.\nv) There are cyclic graphs which are complete.", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "b"}, "6": {"statement": " What is the number of vertices of degree 2 in a path graph having n vertices,here n>2.", "options": {"a": "n-2", "b": "n", "c": "2", "d": "0"}, "correct": "a"}, "8": {"statement": " Which of the following graphs are isomorphic to each other?\n", "options": {"a": "fig 1 and fig 2", "b": "fig 2 and fig 3", "c": "fig 1 and fig 3", "d": "fig 1, fig 2 and fig 3"}, "correct": "a"}, "9": {"statement": " In the given graph which edge should be removed to make it a Bipartite Graph?\n", "options": {"a": "A-C", "b": "B-E", "c": "C-D", "d": "D-E"}, "correct": "b"}}}, "110": {"topic_name": "Directed Graph", "mcqs": {"2": {"statement": " A graph having an edge from each vertex to every other vertex is called a ___________", "options": {"a": "Tightly Connected", "b": "Strongly Connected", "c": "Weakly Connected", "d": "Loosely Connected"}, "correct": "b"}, "3": {"statement": " What is the number of unlabeled simple directed graph that can be made with 1 or 2 vertices?", "options": {"a": "2", "b": "4", "c": "5", "d": "9"}, "correct": "b"}, "4": {"statement": " Floyd Warshall Algorithm used to solve the shortest path problem has a time complexity of __________", "options": {"a": "O(V*V)", "b": "O(V*V*V)", "c": "O(E*V)", "d": "O(E*E)"}, "correct": "b"}, "6": {"statement": " Assuming value of every weight to be greater than 10, in which of the following cases the shortest path of a directed weighted graph from 2 vertices u and v will never change?", "options": {"a": "add all values by 10", "b": "subtract 10 from all the values", "c": "multiply all values by 10", "d": "in both the cases of multiplying and adding by 10"}, "correct": "d"}, "7": {"statement": " What is the maximum possible number of edges in a directed graph with no self loops having 8 vertices?", "options": {"a": "28", "b": "64", "c": "256", "d": "56"}, "correct": "a"}, "8": {"statement": " What would be the DFS traversal of the given Graph?\n", "options": {"a": "ABCED", "b": "AEDCB", "c": "EDCBA", "d": "ADECB"}, "correct": "b"}}}, "111": {"topic_name": "Directed Acyclic Graph", "mcqs": {"2": {"statement": " Which of the following is not a topological sorting of the given graph?\n", "options": {"a": "A B C D E F", "b": "A B F E D C", "c": "A B E C F D", "d": "A B C D F E"}, "correct": "a"}, "3": {"statement": " With V(greater than 1) vertices, how many edges at most can a Directed Acyclic Graph possess?", "options": {"a": "(V*(V-1))/2", "b": "(V*(V+1))/2", "c": "(V+1)C2", "d": "(V-1)C2"}, "correct": "c"}, "4": {"statement": " The topological sorting of any DAG can be done in ________ time.", "options": {"a": "cubic", "b": "quadratic", "c": "linear", "d": "logarithmic"}, "correct": "b"}, "5": {"statement": " If there are more than 1 topological sorting of a DAG is possible, which of the following is true.", "options": {"a": "Many Hamiltonian paths are possible", "b": "No Hamiltonian path is possible", "c": "Exactly 1 Hamiltonian path is possible", "d": "Given information is insufficient to comment anything"}, "correct": "c"}, "6": {"statement": " What sequence would the BFS traversal of the given graph yield?\n", "options": {"a": "A F D B C E", "b": "C B A F E D", "c": "A B D C E F", "d": "E F D C B A"}, "correct": "b"}, "9": {"statement": " Which of the given statement is true?", "options": {"a": "All the Cyclic Directed Graphs have topological sortings", "b": "All the Acyclic Directed Graphs have topological sortings", "c": "All Directed Graphs have topological sortings", "d": "All the cyclic directed graphs hace non topological sortings"}, "correct": "b"}}}, "112": {"topic_name": "Propositional and Directed Acyclic Word Graph", "mcqs": {"1": {"statement": " In which of the following does a Directed Acyclic Word Graph finds its application in?", "options": {"a": "String Matching", "b": "Number Sorting", "c": "Manipulations on numbers", "d": "Pattern Printing"}, "correct": "b"}, "2": {"statement": " What is the number of words that can be formed from the given Directed Acyclic Word Graph?\n", "options": {"a": "2", "b": "4", "c": "12", "d": "7"}, "correct": "a"}, "3": {"statement": " Determine the longest string which is described by the given Directed Acyclic Word Graph.\n", "options": {"a": "BATS", "b": "BOATS", "c": "BOT", "d": "BAT"}, "correct": "a"}, "4": {"statement": " What is time complexity to check if a string(length S1) is a substring of another string(length S2) stored in a Directed Acyclic Word Graph, given S2 is greater than S1?", "options": {"a": "O(S1)", "b": "O(S2)", "c": "O(S1+S2)", "d": "O(1)"}, "correct": "a"}, "5": {"statement": " In which of the following case does a Propositional Directed Acyclic Graph is used for?", "options": {"a": "Representation of Boolean Functions", "b": "String Matching", "c": "Searching", "d": "Sorting of number"}, "correct": "c"}}}, "113": {"topic_name": "Multigraph and Hypergraph", "mcqs": {"1": {"statement": " Given Adjacency matrices determine which of them are PseudoGraphs?\ni)   {{1,0} {0,1}}\nii)  {{0,1}{1,0}}\niii) {{0,0,1}{0,1,0}{1,0,0}}", "options": {"a": "only i)", "b": "ii) and iii)", "c": " i) and iii)", "d": "i) ii) and iii)"}, "correct": "a"}, "3": {"statement": " Determine the number of vertices for the given Graph or Multigraph?\nG is a 4-regular Graph having 12 edges.", "options": {"a": "3", "b": "6", "c": "4", "d": "Information given is insufficient"}, "correct": "b"}, "4": {"statement": " Which of the following statement is true.", "options": {"a": "There exists a Simple Graph having 10 vertices such that minimum degree of the graph is 0 and maximum degree is 9", "b": "There exists a MultiGraph having 10 vertices such that minimum degree of the graph is 0 and maximum degree is 9", "c": "There exists a MultiGraph as well as a Simple Graph having 10 vertices such \tthat minimum degree of the graph is 0 and maximum degree is 9", "d": "None of the mentioned"}, "correct": "c"}, "5": {"statement": " Given Adjacency matrices determine which of them are PseudoGraphs?\ni)   {{1,0} {0,1}}\nii)  {{0,1}{1,0}}\niii) {{0,0,1}{0,1,0}{1,0,0}}", "options": {"a": "only i)", "b": "ii) and iii)", "c": " i) and iii)", "d": "i) ii) and iii)"}, "correct": "d"}, "6": {"statement": " Possible number of labelled simple Directed, Pseudo and Multigarphs \texist having 2 vertices?", "options": {"a": "3, Infinite, 4", "b": "4, 3, Infinite", "c": "4, Infinite, infinite", "d": "4, Infinite, Infinite"}, "correct": "d"}, "7": {"statement": " Which of the following is a HyperGraph, where V is the set of vertices, E is the set of edges?", "options": {"a": "V = {v1, v2, v3} E = {e1, e2} = {{v2, v3} {v1, v3}}", "b": "V = {v1, v2} E = {e1} = {{v1, v2}}", "c": "V = {v1, v2, v3} E = {e1, e2, e3} = {{v2, v3}{v3, v1}{v2, v1}}", "d": "All of the mentioned"}, "correct": "a"}, "9": {"statement": " What is the degree sequence of the given HyperGraph, in non-increasing order.\nV = {v1,v2,v3,v4,v5,v6} E = {{v1,v4,v5} {v2,v3,v4,v5} {v2} {v1} {v1,v6}}", "options": {"a": "3,2,1,1,1,1", "b": "3,2,2,2,1,1", "c": "3,2,2,2,2,1", "d": "3,2,2,1,1,1"}, "correct": "a"}}}, "114": {"topic_name": "Binary Decision Diagrams & and Inverter Graph", "mcqs": {"1": {"statement": " Binary Decision Diagram is a type of __________", "options": {"a": "Multigraph", "b": "Cyclic Graph", "c": "Directed Acyclic Graph", "d": "Directed Acyclic Word Graph"}, "correct": "a"}, "2": {"statement": " In which of the following case does a Binary Decision Diagram is used for?", "options": {"a": "Representation of Boolean Functions", "b": "String Matching", "c": "Searching", "d": "Sorting of number"}, "correct": "b"}, "3": {"statement": " In a Binary Decision Diagram, how many types of terminal exists?", "options": {"a": "1", "b": "2", "c": "3", "d": "4"}, "correct": "c"}, "4": {"statement": " In a Binary Decision  Diagrams 0 values by a _________ line and the 1 values are represented by a _________ line.", "options": {"a": "dashed, bold", "b": "bold, dashed", "c": "dotted, bold", "d": "dotted, dashed"}, "correct": "d"}, "5": {"statement": " How many nodes are required to create a Binary Decision Tree having 4 variables?", "options": {"a": "24", "b": "24-1", "c": "25", "d": "25-1"}, "correct": "a"}, "7": {"statement": " Size of an And Inverter Graph is the number of _______ gates and the number of logic levels is number of ________ gates on the __________ path from a primary input to a primary output.", "options": {"a": "AND, AND, average", "b": "AND, OR, longest", "c": "OR, OR, shortest", "d": "AND, AND, longest"}, "correct": "c"}, "8": {"statement": " And Inverter Graph is a type of __________", "options": {"a": "Multigraph", "b": "Cyclic Graph", "c": "Directed Acyclic Graph", "d": "Directed Acyclic Word Graph"}, "correct": "a"}}}, "total_topics": 115, "total_mcqs": 813}